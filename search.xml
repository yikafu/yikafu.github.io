<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java笔记</title>
      <link href="/posts/2022-09-28-Java%E7%AC%94%E8%AE%B0.html"/>
      <url>/posts/2022-09-28-Java%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、-基本语法"><a href="#一、-基本语法" class="headerlink" title="一、 基本语法"></a>一、 基本语法</h1><h2 id="1-1、基本架构"><a href="#1-1、基本架构" class="headerlink" title="1.1、基本架构"></a>1.1、基本架构</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 文件名 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-2、变量转换"><a href="#1-2、变量转换" class="headerlink" title="1.2、变量转换"></a>1.2、变量转换</h2><ol><li>自动转换</li></ol><p><img src="http://m.qpic.cn/psb?/V12fNjAq1vzOr1/SZpv*ygeaeuMvqXF269KPfI6JACwSfyc6S.80KKGBds!/b/dL4AAAAAAAAA&amp;bo=ewN.AAAAAAARBzY!&amp;rf=viewer_4" alt=""></p><ol><li>强制装换</li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">目标数据类型 变量名 = (目标数据类型) Value;</span><br></pre></td></tr></table></figure><h2 id="1-3、输入"><a href="#1-3、输入" class="headerlink" title="1.3、输入"></a>1.3、输入</h2><ol><li>导入包    <code>import java.util.Scanner;</code></li><li>创建对象   <code>Scanner 变量名 = new Scanner(System.in);</code></li><li>接收变量    <code>int i=sc.nextInt();</code></li><li>断开输入链接  <code>in.close();</code></li></ol><h2 id="1-4、位运算符"><a href="#1-4、位运算符" class="headerlink" title="1.4、位运算符"></a>1.4、位运算符</h2><div class="table-container"><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">操作</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td style="text-align:left">&lt;&lt;</td><td style="text-align:left">左移</td><td style="text-align:left">向左移动，低位补0   ， 左移一次相当于乘2</td></tr><tr><td style="text-align:left">&gt;&gt;</td><td style="text-align:left">右移</td><td style="text-align:left">向右移动，高位补0或1 ，右移一次相当于除2（向下取整）</td></tr></tbody></table></div><ul><li><h2 id="1-5、原码与补码"><a href="#1-5、原码与补码" class="headerlink" title="1.5、原码与补码"></a>1.5、原码与补码</h2></li><li><p>原码：十进制数据的二进制表现形式，最左边是符号位，0为正，1为负</p></li><li>反码：正数的补码反码是其本身，负数的反码是符号位保持不变，其余位取反</li><li>补码：正数的补码是其本身，负数的补码是在<strong>其反码的基础上+1</strong></li></ul><p><strong>负数的补码公式</strong> <code>~(|负数|)+1</code></p><h2 id="1-6、栈-和-堆"><a href="#1-6、栈-和-堆" class="headerlink" title="1.6、栈 和 堆"></a>1.6、栈 和 堆</h2><p><img src="https://img-blog.csdn.net/20180403094008711" alt=""></p><ul><li>Java内存分为 <strong>栈</strong>   <strong>堆</strong>  <strong>方法区</strong>  <strong>本地方法栈</strong>  <strong>寄存器</strong><ul><li>栈： 方法运行时使用的内存，比如main方法运行，进入方法栈中执行，方法执行完后出栈</li><li>堆:：存储对象或者数组，new来创建的，都存储在堆内存</li></ul></li><li>定义的变量 <code>int[] a</code>储存与栈中 ，其指向位于堆中的具体内存空间<code>new int[12]</code></li></ul><h1 id="二、-面向对象基本知识"><a href="#二、-面向对象基本知识" class="headerlink" title="二、 面向对象基本知识"></a>二、 面向对象基本知识</h1><h2 id="2-1、类和对象"><a href="#2-1、类和对象" class="headerlink" title="2.1、类和对象"></a>2.1、类和对象</h2><p>类的定义：变量 + 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 类名&#123;</span><br><span class="line">定义变量</span><br><span class="line">定义方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">类名 对象名 = <span class="keyword">new</span> 类名()；</span><br></pre></td></tr></table></figure><ul><li>成员变量的私有性： 在定义变量时加上 <code>private</code></li><li>针对于每一个私有化的成员变量，都要提供<code>get</code>和<code>set</code>方法<ul><li><code>set</code>方法：给成员变量赋值</li><li><code>get</code>方法：对外提供成员变量的值</li></ul></li></ul><p>类的分类：</p><ol><li>JavaBean类 ： 用于描述事物的一般类</li><li><p>测试类：具有main方法的类</p></li><li></li></ol><h2 id="2-2、构造方法"><a href="#2-2、构造方法" class="headerlink" title="2.2、构造方法"></a>2.2、构造方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line">修饰符 类名（参数）&#123;</span><br><span class="line">方法体；</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>方法名与类名相同，大小写也要一致</li><li>没有返回值类型，连void都没有</li><li>没有具体的返回值（不能由retrun带回结果数据）</li></ol><p>执行时机：</p><ol><li>创建对象时自动调用，并且会<strong>自动创建空参构造方法</strong></li><li>每创建一次对象，就会调用一次构造方法</li></ol><p>方法的传参：</p><ol><li>对于基本数据类型，传参时是传形参 ，不改变原有数据</li><li>对于类的传参，传的是地址，会改变原有数据</li></ol><h2 id="2-3、定义成员方法"><a href="#2-3、定义成员方法" class="headerlink" title="2.3、定义成员方法"></a>2.3、定义成员方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">text</span> &#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Name1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输出name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在B类中调用A类的方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义A类变量</span></span><br><span class="line">A类名 p = <span class="keyword">new</span> <span class="title class_">A</span>类();</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用A类中的方法</span></span><br><span class="line">p.方法名()</span><br></pre></td></tr></table></figure><h2 id="2-4、方法的重载"><a href="#2-4、方法的重载" class="headerlink" title="2.4、方法的重载"></a>2.4、方法的重载</h2><ul><li>在同一个类中，定义了多个同名的方法，这些<strong>同名的方法</strong>具有同种的功能。</li><li>每个方法具有<strong>不同的参数类型或参数个数</strong>，这些同名的方法，就构成了重载关系</li><li><p>简单记：同一个类中，方法名相同，参数不同的方法。与返回值无关</p></li><li><p>同时对于同名方法的调用，Java会根据所传参数的数量自动匹配方法</p></li></ul><h2 id="2-5、继承"><a href="#2-5、继承" class="headerlink" title="2.5、继承"></a>2.5、继承</h2><p>父类的继承</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 子类名 extends 父类名 &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>private</strong> 修饰符的成员变量、成员方法是不能被继承的，构造方法不能被继承</p></li><li><p>子类的构造方法执行时，一定要保证先执行父类的构造方法。若父类有不带参数的构造方法，则自动执行父类的不带参数的构造方法，否则必须在子类的构造方法中的第一行，显式地执行父类的带参数的构造方法，以保证对类中定义的变量的初始化。</p></li></ul><h2 id="2-6、标准JavaBean"><a href="#2-6、标准JavaBean" class="headerlink" title="2.6、标准JavaBean"></a>2.6、标准JavaBean</h2><ol><li><p>类名需要见名知意</p></li><li><p>成员变量使用<code>private</code>修饰</p></li><li><p>提供至少两个构造方法</p><ul><li><p>无参构造方法</p></li><li><p>带全部参数的构造方法</p></li></ul></li><li><p>成员方法</p></li></ol><ul><li>提供每一个成员变量对应的<code>setXxx()</code>和<code>getXxx()</code></li><li>如果还有其他行为，也需要写上</li></ul><h2 id="2-7、this关键字"><a href="#2-7、this关键字" class="headerlink" title="2.7、this关键字"></a>2.7、this关键字</h2><ol><li>就近原则： 对于同名的<strong>成员变量</strong>（全局变量）和<strong>局部变量</strong>，谁近用谁</li><li>使用this关键字强制访问成员变量</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GirlFriend</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="type">int</span> age <span class="number">10</span>;</span><br><span class="line">System.out.printin(age); <span class="comment">//此时age为10</span></span><br><span class="line">System.out.printin(<span class="built_in">this</span>.age); <span class="comment">//此时age为1</span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用this关键字强制访问成员方法</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Powershell美化</title>
      <link href="/posts/2022-08-24-Powershell%E7%BE%8E%E5%8C%96.html"/>
      <url>/posts/2022-08-24-Powershell%E7%BE%8E%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<p><del>在使用on my posh 后，多次出现加载时长高达6000ms的情况，已经放弃使用on my posh ，迫不得已改用Startship来进行美化</del></p><h1 id="一、On-my-posh"><a href="#一、On-my-posh" class="headerlink" title="一、On my posh"></a>一、On my posh</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li><p>在微软商店搜索 <code>on my posh</code> 进行安装</p></li><li><p>打开 PowerShell 提示符并运行以下命令：</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">winget install JanDeDobbeleer.OhMyPosh <span class="literal">-s</span> winget</span><br></pre></td></tr></table></figure></li><li><p>通过github下载安装包，安装最新版本的 <code>installxxx.exe</code></p><p><a href="https://github.com/JanDeDobbeleer/oh-my-posh/releases">Releases</a></p></li></ol><h2 id="配置-PowerShell"><a href="#配置-PowerShell" class="headerlink" title="配置 PowerShell"></a>配置 PowerShell</h2><p>Powershell版本需要6以上</p><p>推荐同时使用<a href="https://apps.microsoft.com/store/detail/windows-terminal/9N0DX20HK701?hl=zh-cn&amp;gl=CN">Windows Terminal</a></p><p>在 Powershell 中输入<code>notepad $PROFILE</code>，用记事本打开 Powershell 的配置文件脚本</p><p>当上述命令给出错误时，输入以下代码创建配置文件</p><figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">New-Item</span> <span class="literal">-Path</span> <span class="variable">$PROFILE</span> <span class="literal">-Type</span> File <span class="literal">-Force</span></span><br></pre></td></tr></table></figure><p>输入<code>oh-my-posh init pwsh | Invoke-Expression</code> ，保存并关闭记事本</p><p>重新打开<code>Powershell</code>美化成功</p><h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>如果是默认安装在 <code>C:\Users\用户名\AppData\Local\Programs</code> ，使用<code>Get-PoshThemes</code>可以列出本地所有主题，否则需使用 <code>Get-PoshThemes -Path&quot;安装目录路径&quot;</code> <del>如C:\Program Files (x86)\oh-my-posh\themes</del></p><p>更改主题要打开 此电脑—文档—PowerShell 里面后缀名为 .ps1 的文件，将<code>oh-my-posh init pwsh | Invoke-Expression</code> , 改为<code>oh-my-posh init pwsh --config &#39;安装目录+主题名.omp.json&#39; | Invoke-Expression</code></p><h2 id="字体乱码"><a href="#字体乱码" class="headerlink" title="字体乱码"></a>字体乱码</h2><p>以管理员身份执行以下代码安装字体，或者通过其他方式安装 </p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">oh-my-posh font install</span><br></pre></td></tr></table></figure><p>然后在Powershell 或 Windows Terminal 中更改字体样式为 <code>MesloLGM NF</code>或其他Meslo字体</p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS学习笔记</title>
      <link href="/posts/2022-08-10-JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
      <url>/posts/2022-08-10-JS%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、-初识JavaScript"><a href="#一、-初识JavaScript" class="headerlink" title="一、 初识JavaScript"></a>一、 初识JavaScript</h1><h2 id="1-1、-JavaScript书写位置"><a href="#1-1、-JavaScript书写位置" class="headerlink" title="1.1、  JavaScript书写位置"></a>1.1、  JavaScript书写位置</h2><p>内联JavaScript<br>内部JavaScript — 写到<code>&lt;/body&gt;</code>标签上方<br>外部JavaScript — 通过src引入html页面中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src = <span class="string">&quot;#&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="1-2、-输入输出语句"><a href="#1-2、-输入输出语句" class="headerlink" title="1.2、 输入输出语句"></a>1.2、 输入输出语句</h2><p>输入：<code>prompt()</code><br>输出：<code>alert0()</code> 、 <code>document.write()</code> 、 <code>console.log()</code></p><ul><li><p><code>alert</code>指令,控制浏览器弹出警告框</p></li><li><p><code>document.write</code> 函数 向文档(document)写入(write)一段话 注意是向body里写入内容</p></li><li><p><code>console.log</code> 函数 , 向控制台里面输出内容</p></li></ul><h2 id="1-3、-变量"><a href="#1-3、-变量" class="headerlink" title="1.3、 变量"></a>1.3、 变量</h2><p>声明变量 ： 声明标识符 + 变量名</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量名<span class="comment">//局部变量</span></span><br><span class="line"><span class="keyword">var</span> 变量名<span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">const</span> 变量名<span class="comment">//常量</span></span><br></pre></td></tr></table></figure><ul><li>如今推荐使用<code>let</code>取缔<code>var</code>，避免变量污染</li><li><code>let</code>不允许多次声明<strong>同一个变量</strong></li><li><code>let</code>具有块作用域</li></ul><h2 id="1-4、-数值"><a href="#1-4、-数值" class="headerlink" title="1.4、 数值"></a>1.4、 数值</h2><ul><li><p>js中的数值并不是无限大/无限小的，当数值超过一定范围后会显示近似值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">99999999999999999991</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)；</span><br><span class="line"><span class="comment">/* 此时显示的a的值是100000000000000000000 */</span></span><br></pre></td></tr></table></figure></li><li><p><code>Infinity</code>是一个特殊的数值表示无穷</p></li><li><p><code>NaN</code>也是一个特殊的数值，表示非法的数值</p></li></ul><ol><li><strong>大整数</strong>： 在整数后面加上n，以确保不会被近似处理，大小是无限大的 <del>以内存为上限</del></li><li><strong>typrof</strong>： 用来检查值的类型，<code>typeof a</code> <del>不需要括号</del></li></ol><h2 id="1-5、-模板字符串"><a href="#1-5、-模板字符串" class="headerlink" title="1.5、 模板字符串"></a>1.5、 模板字符串</h2><ul><li>使用反单引号、来表示模板字符串</li><li>模板字符串中可以嵌入变量</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;小明&quot;</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="string">`你好，<span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line"><span class="comment">/* $&#123;&#125;嵌入变量 */</span></span><br></pre></td></tr></table></figure><h2 id="1-6、-数据类型转换"><a href="#1-6、-数据类型转换" class="headerlink" title="1.6、 数据类型转换"></a>1.6、 数据类型转换</h2><ol><li><p>转换成字符串</p><p><code>toString()</code> or <code>String()</code></p><ul><li>方法调用 <code>a = a.toString()</code> , <code>a = String(a)</code></li></ul></li><li><p>转换成数值</p><p><code>Number()</code></p><ul><li>如果字符串不是合法数字，则转换为NaN</li><li>如果字符串是空串或纯空格的字符串，则转换为0</li></ul><p><code>parseInt()</code></p><ul><li>将一个字符串转换为一个整数</li><li>解析时，会自左向右读取一个字符串，读取到字符串中所有的有效的<strong>整数</strong>，遇到非数字则停止</li><li>也可以使用<code>parseInt()</code>来对一个数字进行取整</li></ul><p><code>parseFloat()</code></p><ul><li>将一个字符串转换为浮点数</li><li>解析时，会自左向右读取一个字符串，读取到字符串中所有的有效的<strong>小数</strong>，遇到非数字则停止</li></ul></li><li><p>转换为布尔值</p><p><code>Boolean()</code></p><ul><li>对于数字，0 和 NaN 为false ， 其余全为true</li><li>对于字符串，空字符串为false ， 其余全为true</li><li>null 和 undefined 为false</li></ul></li></ol><h2 id="1-7、-运算与赋值"><a href="#1-7、-运算与赋值" class="headerlink" title="1.7、 运算与赋值"></a>1.7、 运算与赋值</h2><ul><li><p>空赋值： 只有当变量的值为null或undefined时才会对变量进行赋值</p></li><li><p>一元的运算： 当我们对非数值类型进行正负运算时，会先将其转换为数值然后再运算</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&quot;123&quot;</span></span><br><span class="line">a = +a</span><br><span class="line"><span class="comment">/* a = 123 */</span></span><br></pre></td></tr></table></figure><ul><li>自增和自减： 同C语言，有  <code>++a</code> 和 <code>a++</code> 之分</li><li>可以通过两次非运算 <code>!!</code>将数值转换成布尔值</li><li>逻辑运算<code>&amp;&amp;</code>：<del>（返回false的原始值）</del><ul><li>如果第一个值为false,则直接返回第一个值</li><li>如果第一个值为true,则返回第二个值</li></ul></li><li><p>逻辑运算<code>||</code> :  <del>（返回true的原始值）</del></p><ul><li>如果第一个值为false,则直接返回第二个值</li><li>如果第一个值为true,则返回第一个值</li></ul></li><li><p>全等运算符<code>===</code>：用来比较两个值是否全等，类别不同直接false</p></li><li>条件运算符<code>关系式1 ? 表达式1 : 表达式2</code>: true执行1 , false执行2</li></ul><h1 id="二、-流程控制语句"><a href="#二、-流程控制语句" class="headerlink" title="二、 流程控制语句"></a>二、 流程控制语句</h1><p>格式： </p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">判断词 ( 条件 )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1、-if-else"><a href="#2-1、-if-else" class="headerlink" title="2.1、 if else"></a>2.1、 if else</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (条件判断)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2、-switch-case"><a href="#2-2、-switch-case" class="headerlink" title="2.2、 switch case"></a>2.2、 switch case</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span>(表达式<span class="number">1</span>):</span><br><span class="line">        pass</span><br><span class="line">    <span class="keyword">case</span>(表达式<span class="number">2</span>):</span><br><span class="line">        pass</span><br><span class="line">    <span class="keyword">case</span>(表达式<span class="number">3</span>):</span><br><span class="line">        pass</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当 <code>表达式0</code> 与 case后任一表达式全等时，执行该<code>case以及之后所有case控制的语句</code><del>（同C语言）</del></li></ul><h2 id="2-3、while"><a href="#2-3、while" class="headerlink" title="2.3、while"></a>2.3、while</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件判断)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* ---------------------------------------------------------------- */</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断)</span><br></pre></td></tr></table></figure><h2 id="2-4、for"><a href="#2-4、for" class="headerlink" title="2.4、for"></a>2.4、for</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始条件；条件表达式；更新条件)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5、for-in-for-of"><a href="#2-5、for-in-for-of" class="headerlink" title="2.5、for in / for of"></a>2.5、for in / for of</h2><p><code>for in</code> 语句循环遍历对象的属性</p><p><code>for of</code> 语句循环遍历可迭代对象的值</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (key <span class="keyword">in</span> object) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (variable <span class="keyword">of</span> iterable) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="三、-函数"><a href="#三、-函数" class="headerlink" title="三、 函数"></a>三、 函数</h1><ul><li><p>函数声明</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 调用*/</span></span><br><span class="line">函数名()</span><br></pre></td></tr></table></figure></li><li><p>函数表达式</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 函数名 = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>箭头函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> 函数名() =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当箭头函数中只有一个参数时，可以省略<code>()</code></li><li>箭头函数的返回值可以直接写在箭头后 <code>const fn(a,b) =&gt; a + b</code></li><li>如果直接在箭头后设置对象字面量为返回值时，对象字面量必须使用<code>()</code>括起</li></ul></li></ul><h1 id="四、-对象"><a href="#四、-对象" class="headerlink" title="四、 对象"></a>四、 对象</h1><p><del>相当于C语言、Python中的类</del></p><h2 id="4-1、Object"><a href="#4-1、Object" class="headerlink" title="4.1、Object"></a>4.1、Object</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>()</span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&quot;张三&quot;</span></span><br></pre></td></tr></table></figure><ul><li>对象中可以存储多个各种类型的数据</li><li>对象中存储的数据，我们称为属性</li><li>向对象中添加属性：<code>对象.属性名=属性值</code></li><li>读取对象中的属性：<code>对象.属性名</code></li></ul><h2 id="4-2、Symbol"><a href="#4-2、Symbol" class="headerlink" title="4.2、Symbol"></a>4.2、Symbol</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> symbol = <span class="title class_">Symbol</span>()</span><br></pre></td></tr></table></figure><ul><li>也可以使用符号(symbol)作为属性名，来添加属性</li><li>获取这种属性时，也必须使用symbol</li><li>使用symbol添加的属性，通常是那些不希望被外界访问的属性（<del>此时称为该对象的方法</del>）</li></ul><h2 id="4-3、通过-来创建对象"><a href="#4-3、通过-来创建对象" class="headerlink" title="4.3、通过{}来创建对象"></a>4.3、通过{}来创建对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name = <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    age = <span class="number">11</span>,</span><br><span class="line">    [<span class="string">&quot;gender&quot;</span>] = <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>直接使用<code>&#123;&#125;</code>来创建对象,可以直接向对象中添加属性</li><li>对象中的属性也可以是一个函数</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>修改对象：修改对象时，如果有其他变量指向该对象，则所有指向该对象的变量都会收到影响</li><li>修改变量：修改变量时，只会影响当前的变量</li><li>在使用变量存储对象时，很容易因为改变变量指向的对象，提高代码的复杂度。所以通常情况下，声明存储对象的变量时会使用<code>const</code> </li><li>注意：<code>const</code>只是禁止变量被重新赋值，对对象的修改没有任何影响</li></ul><h2 id="4-4、-方法"><a href="#4-4、-方法" class="headerlink" title="4.4、 方法"></a>4.4、 方法</h2><p>当一个对象的属性指向一个函数，那么我们就称这个函数是该对象的方法。调用函数就称为调用对象的方法</p><h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p><del>可以适当了解的无意义废话</del></p><h2 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h2><ul><li><code>var</code>用来声明变量，作用和<code>Let</code>相同，但是<code>var</code>不具有块作用域</li><li>在全局中使用<code>var</code>声明的变量，都会作为window对象的属性保存</li><li>使用function声明的函数，都会作为window的方法保存</li><li>使用l<code>et</code>声明的变量不会存储在window中</li><li>在局部作用域中，如果没有使用<code>va</code>r或<code>Let</code>声明变量，则变量会自动成为window对象的属性也就是全局变量</li></ul><h2 id="变量和函数的提升"><a href="#变量和函数的提升" class="headerlink" title="变量和函数的提升"></a>变量和函数的提升</h2><ul><li>使用<code>var</code>声明的变量，它会在所有代码执行前被声明。所以我们可以在变量声明前就访问变量</li><li>可以被访问但不会被赋值<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="comment">/* 输出是undefined */</span></span><br><span class="line"><span class="comment">/* 即有定义没有被赋值 */</span></span><br></pre></td></tr></table></figure></li><li>使用函数声明创建的函数，会在其他代码执行前被创建。所以我们可以在函数声明前调用函数 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记-平面与动画</title>
      <link href="/posts/2022-08-07-CSS%E7%AC%94%E8%AE%B0-%E5%B9%B3%E9%9D%A2%E4%B8%8E%E5%8A%A8%E7%94%BB.html"/>
      <url>/posts/2022-08-07-CSS%E7%AC%94%E8%AE%B0-%E5%B9%B3%E9%9D%A2%E4%B8%8E%E5%8A%A8%E7%94%BB.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、CSS3-2D属性"><a href="#一、CSS3-2D属性" class="headerlink" title="一、CSS3-2D属性"></a>一、CSS3-2D属性</h1><h2 id="1-1、transition过渡"><a href="#1-1、transition过渡" class="headerlink" title="1.1、transition过渡"></a>1.1、transition过渡</h2><p><code>transition</code>可以制作过渡动画，常和<code>:hover</code>搭配</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transition</span>: 要过渡的属性 花费时间 运动曲线 何时开始</span><br></pre></td></tr></table></figure><ol><li><strong>要过渡的属性</strong>：如果想要所有的属性都变化过渡，写一个all就可以。</li><li><strong>花费时间</strong>：单位是秒(必须写单位) </li><li><strong>运动曲线</strong>：默认是ease(可以省略)</li><li><strong>何时开始</strong>：单位是秒(必须写单位)，可以设置延迟触发事件，默认是0s(可以省略)</li></ol><h2 id="1-2、transform的2D转换"><a href="#1-2、transform的2D转换" class="headerlink" title="1.2、transform的2D转换"></a>1.2、transform的2D转换</h2><p><code>转换(transform)</code>可以实现元素的位移，旋转，缩放等效果</p><ol><li><p><strong>移动translate</strong></p><p>2D移动是2D转换里面的一种功能，可以改变元素在页面中的位置，<strong>类似</strong>定位。</p> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>:<span class="built_in">translate</span>(x,y); </span><br><span class="line"><span class="comment">/*或者分开写*/</span></span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translateX</span>(n);</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translateY</span>(n);</span><br><span class="line">   </span><br><span class="line"><span class="comment">/*如果只移动X轴*/</span></span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translate</span>(<span class="number">100px</span>,<span class="number">0</span>);</span><br><span class="line">translateX(<span class="number">100px</span>);</span><br></pre></td></tr></table></figure><ul><li>translate 中的百分比单位是<strong>相对于自身元素</strong>的</li></ul></li><li><p><strong>旋转rotate</strong></p><p>默认旋转的中心点是元素的中心点</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate</span>(度数)</span><br><span class="line"><span class="comment">/*度数单位是deg*/</span></span><br></pre></td></tr></table></figure><ul><li><p>旋转中心点</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform-origin</span>: x y;</span><br></pre></td></tr></table></figure><ul><li>x y <strong>默认</strong>转换的中心点是元素的中心点(50% 50%)</li><li>x y 设置 像素或者方位名词(top bottom left right center)</li></ul></li></ul></li><li><p><strong>缩放scale</strong></p></li></ol><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: <span class="built_in">scale</span>(x,y);</span><br></pre></td></tr></table></figure><ol><li><code>transform:scale(1,1)</code>: 宽和高都放大一倍，相当于没有放大</li><li><code>transform:scale(2,2)</code>：宽和高都放大了2倍</li><li><code>transform:scale(2)</code>：只写一个参数，第二个参数则和第一个参数一样，相当于 <code>scale(2,2)</code></li><li><code>transform:scale(0.5,0.5)</code>：缩小</li><li>可以设置转换中心点缩放，默认以中心点缩放的，而且不影响其他盒子</li></ol><h2 id="1-3、2D转换综合写法"><a href="#1-3、2D转换综合写法" class="headerlink" title="1.3、2D转换综合写法"></a>1.3、2D转换综合写法</h2><ol><li>同时使用多个转换，其格式为: <code>transform:translate() rotate() scale()</code> <del>移动-旋转-缩放</del></li><li>其顺序会影响转换的效果(先旋转会改变坐标轴方向)</li><li><strong>同时有位移和其他属性时候，位移要放到最前面</strong></li></ol><h1 id="二、动画"><a href="#二、动画" class="headerlink" title="二、动画"></a>二、动画</h1><p><code>animation</code>属性可以实现动画效果，先定义，在调用</p><h2 id="2-1、keyframs定义动画"><a href="#2-1、keyframs定义动画" class="headerlink" title="2.1、keyframs定义动画"></a>2.1、keyframs定义动画</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">   <span class="number">0%</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="number">100%</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-------------------------*/</span></span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称 &#123;</span><br><span class="line">   <span class="selector-tag">from</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="selector-tag">to</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>0% 是动画的开始，100% 是动画的完成。这样的规则就是动画序列。</li><li>在 <code>@keyframes</code> 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果</li><li>动画是使元素从一种样式逐渐变化为另一种样式的效果。您可以改变任意多的样式任意多的次数。</li><li>用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。</li></ul><h2 id="2-2、使用动画"><a href="#2-2、使用动画" class="headerlink" title="2.2、使用动画"></a>2.2、使用动画</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">     <span class="comment">/* 调用动画 */</span></span><br><span class="line">     <span class="attribute">animation-name</span>: 动画名称;</span><br><span class="line">     <span class="comment">/* 持续时间 */</span></span><br><span class="line">     <span class="attribute">animation-duration</span>: 持续时间;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3、动画常用属性"><a href="#2-3、动画常用属性" class="headerlink" title="2.3、动画常用属性"></a>2.3、动画常用属性</h2><div class="table-container"><table><thead><tr><th><strong>属性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>@keyframes</td><td>规定动画。</td></tr><tr><td>animation</td><td>所有动画属性的简写属性，除了animation-play-state属性。</td></tr><tr><td>animation-name</td><td>规定@keyframes动画的名称。（<strong>必须的</strong>）</td></tr><tr><td>animation-duration</td><td>规定动画完成一个周期所花费的秒或毫秒，默认是0。（<strong>必须的</strong>）</td></tr><tr><td>animation-timing-function</td><td>规定动画的速度曲线，默认是“ease”。</td></tr><tr><td>animation-delay</td><td>规定动画何时开始，默认是0。</td></tr><tr><td>animation-iteration-count</td><td>规定动画被播放的次数，默认是1，还有infinite</td></tr><tr><td>animation-direction</td><td>规定动画是否在下一周期逆向播放，默认是“normal“,alternate逆播放</td></tr><tr><td>animation-play-state</td><td>规定动画是否正在运行或暂停。默认是”running”,还有”paused”。</td></tr><tr><td>animation-fill-mode</td><td>规定动画结束后状态，保持forwards回到起始backwards</td></tr></tbody></table></div><ul><li><p>动画的简写属性</p><p>  <code>animation：动画名称 持续时间 运动曲线 何时开始 播放次数 是否反方向 动画起始或者结束的状态</code></p><ul><li>简写属性里面不包含 <code>animation-play-state</code></li><li>暂停动画：<code>animation-play-state: puased;</code> 经常和鼠标经过等其他配合使用</li><li>l想要动画走回来 ，而不是直接跳回来：<code>animation-direction: alternate;</code></li><li>盒子动画结束后，停在结束位置： <code>animation-fill-mode : forwards;</code></li></ul></li></ul><h1 id="三、-3D转换"><a href="#三、-3D转换" class="headerlink" title="三、 3D转换"></a>三、 3D转换</h1><p><img src="https://s3.bmp.ovh/imgs/2022/09/30/54d9cd4669c3bffe.png" alt=""></p><h2 id="3-1、translate3d"><a href="#3-1、translate3d" class="headerlink" title="3.1、translate3d"></a>3.1、translate3d</h2><ul><li><p>3D移动在2D移动的基础上多加了一个可以移动的方向，就是z轴方向，各方位其余均与2D相同</p></li><li><p><code>translateZ</code>引起的变化需要搭配透视来使用</p></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*综合写法*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate3d</span>(<span class="number">2px</span> , <span class="number">3px</span> ,<span class="number">4px</span>);</span><br></pre></td></tr></table></figure><p><strong>透视写在被观察元素的父盒子上面</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了透视就能看到<code>translateZ</code>引起的变化</p><h2 id="3-2、3D旋转rotate3d"><a href="#3-2、3D旋转rotate3d" class="headerlink" title="3.2、3D旋转rotate3d"></a>3.2、3D旋转rotate3d</h2><p>3D旋转：3D旋转指可以让元素在三维平面内沿着 x轴，y轴，z轴或者自定义轴进行旋转。</p><ul><li><code>transform: rotateX(45deg)</code> ：沿着X轴正方向旋转45度</li><li><code>transform: rotateY(45deg)</code> ：沿着Y轴正方向旋转45度</li><li>t<code>ransform: rotateZ(45deg)</code> ：沿着Z轴正方向旋转45度</li><li><code>transform: rotate3d(x,y,z,deg)</code> ：沿着自定义轴旋转 deg为角度(了解即可)</li></ul><p>xyz是表示旋转轴的矢量，是标示你是否希望沿着该轴旋转，最后一个标示旋转的角度。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*沿着X轴旋转45deg*/</span></span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">rotate3d</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">45deg</span>) </span><br><span class="line"><span class="comment">/*沿着对角线旋转45deg*/</span></span><br><span class="line">transform: <span class="built_in">rotate3d</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">45deg</span>) </span><br></pre></td></tr></table></figure><h3 id="左手准则"><a href="#左手准则" class="headerlink" title="左手准则"></a>左手准则</h3><ul><li>左手的手拇指指向 x / y轴的正方向，其余手指的弯曲方向就是该元素沿着x / y轴旋转的方向（正值）</li></ul><h2 id="3-3、3D呈现transform-style"><a href="#3-3、3D呈现transform-style" class="headerlink" title="3.3、3D呈现transform-style"></a>3.3、3D呈现transform-style</h2><ol><li>控制子元素是否开启三维立体环境</li><li><code>transform-style: flat</code> 子元素不开启3d立体空间 (默认的)</li><li><code>transform-style: preserve-3d</code> 子元素开启立体空间</li><li><strong>代码写给父级</strong>，但是影响的是子盒子</li></ol><p><a href="https://blog.csdn.net/gjwlyxs/article/details/105463519">「transform-style和perspective属性的使用！」</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python与Github API</title>
      <link href="/posts/2022-08-06-Python%E4%B8%8EGithub%20API.html"/>
      <url>/posts/2022-08-06-Python%E4%B8%8EGithub%20API.html</url>
      
        <content type="html"><![CDATA[<h1 id="github-api格式"><a href="#github-api格式" class="headerlink" title="github api格式"></a>github api格式</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://api.github.com/repos/用户名/仓库名/releases/latest</span><br></pre></td></tr></table></figure><h1 id="github-api-获取版本号"><a href="#github-api-获取版本号" class="headerlink" title="github api 获取版本号"></a>github api 获取版本号</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">response = requests.get(api_url)</span><br><span class="line">tags_name = response.json()[<span class="string">&quot;tags_name&quot;</span>]</span><br></pre></td></tr></table></figure><p>使用json获取最新版本号</p><h1 id="通过github-api-获取下载链接"><a href="#通过github-api-获取下载链接" class="headerlink" title="通过github api 获取下载链接"></a>通过github api 获取下载链接</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">api_url =</span><br><span class="line"><span class="string">&quot;https://api.github.com/repos/yikafu/fuck-reprository/releases/latest&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回下载链接</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_download_url</span>(<span class="params">api_url</span>):</span><br><span class="line">    response = requests.get(api_url)</span><br><span class="line">    assets_url = response.json()[<span class="string">&quot;assets_url&quot;</span>]</span><br><span class="line">    response1 = requests.get(assets_url)</span><br><span class="line">    r = response1.json()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> r :</span><br><span class="line">        <span class="keyword">return</span> i[<span class="string">&quot;browser_download_url&quot;</span>] </span><br><span class="line">        </span><br></pre></td></tr></table></figure><p>我们所需要的<code>&quot;browser_download_url&quot;</code>位于 <strong>assets</strong> 里面</p><p>因此通过<code>response = requests.get(api_url)</code>获取页面中的<code>&quot;assets_url&quot;</code> , 进而进入<strong>assets</strong>页面</p><p><code>r = response1.json()</code>获取assets页面内容，并通过for循环进行查找字典键为<code>&quot;browser_download_url&quot;</code>的元素，得到他的值，即下载链接</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">download = requests.get(find_download_url(api_url))</span><br><span class="line"><span class="comment"># 确定目录和下载</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>( <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(download.content)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记-高级与新特性</title>
      <link href="/posts/2022-08-01-CSS%E7%AC%94%E8%AE%B0-%E9%AB%98%E7%BA%A7%E4%B8%8E%E6%96%B0%E7%89%B9%E6%80%A7.html"/>
      <url>/posts/2022-08-01-CSS%E7%AC%94%E8%AE%B0-%E9%AB%98%E7%BA%A7%E4%B8%8E%E6%96%B0%E7%89%B9%E6%80%A7.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、精灵图（sprites）"><a href="#一、精灵图（sprites）" class="headerlink" title="一、精灵图（sprites）"></a>一、精灵图（sprites）</h1><ul><li>精灵技术主要针对于背景图片的使用，就是把多个小背景图片整合到一张大图片中</li><li>移动背景图片的位置使用 <code>background-position: x y</code></li><li>移动的距离就是这个目标图片的x和y坐标，x右正左负，y下正上负</li></ul><h1 id="二-、CSS三角"><a href="#二-、CSS三角" class="headerlink" title="二 、CSS三角"></a>二 、CSS三角</h1><p>通过将正方形分为四个三角形，将其中三个赋予透明，一个加上颜色</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box1</span>&#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">50px</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-top-color</span>: red;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="三、-CSS用户界面"><a href="#三、-CSS用户界面" class="headerlink" title="三、 CSS用户界面"></a>三、 CSS用户界面</h1><h2 id="3-1、-鼠标指针"><a href="#3-1、-鼠标指针" class="headerlink" title="3.1、 鼠标指针"></a>3.1、 鼠标指针</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: default ; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2、-outline轮廓线"><a href="#3-2、-outline轮廓线" class="headerlink" title="3.2、 outline轮廓线"></a>3.2、 outline轮廓线</h2><ul><li>给表单添加 <code>outline:0</code>; 或者<code>outline: none</code>;样式后，就可以去掉默认的蓝色边框</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">    <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3、防止拖拽文本域"><a href="#3-3、防止拖拽文本域" class="headerlink" title="3.3、防止拖拽文本域"></a>3.3、防止拖拽文本域</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">textarea</span> &#123;</span><br><span class="line">    <span class="attribute">resize</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、vertical-align"><a href="#四、vertical-align" class="headerlink" title="四、vertical-align"></a>四、vertical-align</h1><ul><li>用于设置<strong>图片</strong>或者<strong>表单（行内块元素）</strong>和<strong>文字垂直对齐</strong>。</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">vertical-align</span>: baseline | top | middle | bottom</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>baseline</td><td>默认，元素放置在父元素的基线上</td></tr><tr><td>top</td><td>顶线对齐</td></tr><tr><td>middle</td><td>中线对齐</td></tr><tr><td>bottom</td><td>底线对齐</td></tr></tbody></table></div><p><img src="https://cdn.jsdelivr.net/gh/yikafu/blog_img/vertical_img1.jpg" alt=""></p><ul><li>图片底侧会有一个空白缝隙，原因是行内块元素会和文字默认基线对齐<ul><li>给图片添加 <code>vertical-align : middle/top/bottom</code> 等</li><li>把图片转换为块级元素 <code>display:block;</code></li></ul></li></ul><h1 id="五、溢出文字显示"><a href="#五、溢出文字显示" class="headerlink" title="五、溢出文字显示"></a>五、溢出文字显示</h1><h2 id="5-1、单行文本溢出省略号显示"><a href="#5-1、单行文本溢出省略号显示" class="headerlink" title="5.1、单行文本溢出省略号显示"></a>5.1、单行文本溢出省略号显示</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 1.先强制一行内显示文本 */</span></span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br><span class="line"><span class="comment">/*默认 normal 是自动换行，nowrap是强制一行显示文本*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 2.超出的部分隐藏 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3.文字用省略号替代超出的部分*/</span></span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="comment">/*ellipsis:省略号*/</span></span><br></pre></td></tr></table></figure><h2 id="5-2、多行文本溢出显示省略号显示（了解）"><a href="#5-2、多行文本溢出显示省略号显示（了解）" class="headerlink" title="5.2、多行文本溢出显示省略号显示（了解）"></a>5.2、多行文本溢出显示省略号显示（了解）</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="comment">/* 弹性伸缩盒子模型显示 */</span></span><br><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line"><span class="comment">/* 限制在一个块元素显示的文本的行数 */</span></span><br><span class="line">-webkit-line-clamp: <span class="number">2</span>;</span><br><span class="line"><span class="comment">/* 设置或检索伸缩盒对象的子元素的排列方式 */</span></span><br><span class="line">-webkit-box-orient : vertical;</span><br></pre></td></tr></table></figure><ul><li>有较大的兼容性问题，更推荐让后台人员来做这个效果</li></ul><h1 id="六、常见布局技巧"><a href="#六、常见布局技巧" class="headerlink" title="六、常见布局技巧"></a>六、常见布局技巧</h1><h2 id="6-1、margin负值的运用"><a href="#6-1、margin负值的运用" class="headerlink" title="6.1、margin负值的运用"></a>6.1、margin负值的运用</h2><p>实现多个边框图相连，实现共用一条边</p><ol><li>两个盒子加边框1px，浮动（<del>贴紧会出现边框叠加</del>）</li><li>给右边盒子添加<code>margin-left: -1px</code></li><li>鼠标经过某个盒子的时候，提高当前盒子的层级即可<ul><li>如果没有定位，则加相对定位(保留位置)</li><li>如果有定位，则加 <code>z-index</code></li></ul></li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/09/30/78a7498714488a73.gif" alt=""></p><h2 id="6-2、文字围绕浮动元素"><a href="#6-2、文字围绕浮动元素" class="headerlink" title="6.2、文字围绕浮动元素"></a>6.2、文字围绕浮动元素</h2><p>浮动元素不会压住文字，自动围绕</p><h2 id="6-3、行内块巧妙运用"><a href="#6-3、行内块巧妙运用" class="headerlink" title="6.3、行内块巧妙运用"></a>6.3、行内块巧妙运用</h2><p>页码在页面中间显示：</p><ol><li>把这些链接盒子转换为行内块，之后给父级指定 <code>text-align: center</code></li><li>利用行内块元素中间有缝隙，并且给父级添加 <code>text-align: center</code> ，行内块元素会水平居中</li></ol><h1 id="七、HTML5新特性"><a href="#七、HTML5新特性" class="headerlink" title="七、HTML5新特性"></a>七、HTML5新特性</h1><h2 id="7-1、HTML5新增语义标签"><a href="#7-1、HTML5新增语义标签" class="headerlink" title="7.1、HTML5新增语义标签"></a>7.1、HTML5新增语义标签</h2><ul><li><code>&lt;header&gt;</code>头部标签</li><li><code>&lt;nav&gt;</code>导航标签</li><li><code>&lt;article&gt;</code>内容标签</li><li><code>&lt;section&gt;</code>定义文档某个区域</li><li><code>&lt;aside&gt;</code>侧边栏标签</li><li><code>&lt;footer&gt;</code>尾部标签</li></ul><h2 id="7-2、HTML5新增媒体标签"><a href="#7-2、HTML5新增媒体标签" class="headerlink" title="7.2、HTML5新增媒体标签"></a>7.2、HTML5新增媒体标签</h2><ul><li><p><code>&lt;video&gt;</code>插入视频标签尽量使用mp4格式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;视频地址&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><p>| 属性          | 描述                 |<br>| ——————- | —————————— |<br>| autoplay      | 视频加载完成自动播放 |<br>| controls      |向用户具示播放控件   |<br>| width、height  | 宽、高 |<br>| loop | 是否循环播放 |<br>| preload | 是否预加载视频（有了autoplay则忽略） |<br>| poster | 加载画面图片 |<br>| muted | 静音播放 |</p></li><li><p><code>&lt;audio&gt;</code>插入音频</p>  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;音频地址&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  只有<code>autoplay</code> 、 <code>controls</code> 、 <code>loop</code> 三个属性，同上</p></li></ul><h2 id="7-3、HTML5新增input类型与属性"><a href="#7-3、HTML5新增input类型与属性" class="headerlink" title="7.3、HTML5新增input类型与属性"></a>7.3、HTML5新增input类型与属性</h2><ol><li><p>新增类型：color、date、datetime、email、month、number、tel（手机号码）、time、url、week等</p><ul><li><p>用于限制<code>input</code>的输入类型</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>新增属性：autofocus、require 、placeholder、autocomplete 、multiple等</p><p> | 属性         | 描述                                                         |<br> | —————— | —————————————————————————————— |<br> | autofocus    | 自动聚焦属性，页面加载亮成自动聚焦到指定表单                 |<br> | require      | 内容不能为空，必填                                           |<br> | placeholder  | 表单的提示信息，存在默认值将不显示                           |<br> | autocomplete | 当用户在字段开始健入时，浏览器甚于之前键入过的值，应该显示出在字段中填写的选项。默认值为”on”,需要放在表单内，同时加上name属性，同时成功提交 |<br> | multiple     | 可以多选文件提交                                             |</p><p> 可以使用<code>input::placeholder &#123;  color=&quot;red&quot; ;&#125;</code>设置提示信息的字体颜色</p></li></ol><h1 id="八、CSS3新特性"><a href="#八、CSS3新特性" class="headerlink" title="八、CSS3新特性"></a>八、CSS3新特性</h1><h2 id="8-1、属性选择器"><a href="#8-1、属性选择器" class="headerlink" title="8.1、属性选择器"></a>8.1、属性选择器</h2><div class="table-container"><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E[att]</td><td>选择具有att属性的E元素</td></tr><tr><td>E[att=“val”]</td><td>选择具有att属性且属性值等于val的E元素</td></tr><tr><td>E[att^=“val”]</td><td>匹配具有att属性且值以val开头的E元素</td></tr><tr><td>E[att$=“val”]</td><td>匹配具有att属性且值以val结尾的E元素</td></tr><tr><td>E[att*=“val”]</td><td>匹配具有att属性且值中含有val的E元素</td></tr></tbody></table></div><h2 id="8-2、结构伪类选择器"><a href="#8-2、结构伪类选择器" class="headerlink" title="8.2、结构伪类选择器"></a>8.2、结构伪类选择器</h2><ul><li>根据父级选择器选择里面的子元素</li></ul><div class="table-container"><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>E:first-child</td><td>匹配父元素中的第一个子元素E</td></tr><tr><td>E:last-child</td><td>匹配父元素中最后一个E元素</td></tr><tr><td>E:nth-child(n)</td><td>匹配父元素中的第n个子元素E</td></tr><tr><td>E:first-of-type</td><td>指定类型E的第一个</td></tr><tr><td>E:last-of-type</td><td>指定类型E的最后一个</td></tr><tr><td>E:nth-of-type（n）</td><td>指定类型E的第n个</td></tr></tbody></table></div><ul><li><h3 id="nth-child-n"><a href="#nth-child-n" class="headerlink" title="nth-child(n)"></a>nth-child(n)</h3><ul><li>n可以是<strong>数字，关键字和公式</strong></li></ul><ol><li>n如果是数字，就是选择第n个子元素，里面数字从1开始</li><li>n可以是关键字：<strong>even</strong> 偶数，<strong>odd</strong>奇数</li><li>n可以是公式：常见的公式如下（如果n是公式，则从0开始计算，但是第0个元素或者超出了元素的个数会被忽略）</li></ol><p>| 公式 | 取值                            |<br>| —— | ———————————————- |<br>| 2n   | 偶数（等价于even）              |<br>| 2n+1 | 奇数（等价于odd）               |<br>| 5n   | 5 10 15 …（5的倍数）            |<br>| n+5  | 从第5个开始（包含第五个）到最后 |<br>| -n+5 | 前5个（包含第5个）              |</p></li><li><p><code>nth-child(n)</code> 和 <code>nth-of-type(n)</code>的区别</p><ol><li><strong><code>nth-child</code> 对父元素里面所有孩子排序选择(序号是固定的)，先找到第n个孩子，然后看看是否和E匹配</strong></li><li><strong><code>nth-of-type</code> 对父元素里面指定子元素进行排序选择，先去匹配E,然后再根据E 找第n个孩子</strong></li></ol></li></ul><h2 id="8-3、伪元素选择器"><a href="#8-3、伪元素选择器" class="headerlink" title="8.3、伪元素选择器"></a>8.3、伪元素选择器</h2><ul><li>利用CSS<strong>创建新标签元素</strong>，而不需要HTML标签</li></ul><div class="table-container"><table><thead><tr><th>选择符</th><th>简介</th></tr></thead><tbody><tr><td>::before</td><td>在元素内部的前面插入内容</td></tr><tr><td>::after</td><td>在元素内部的后面插入内容</td></tr></tbody></table></div><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">元素名<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>before 和 after 必须有 <strong>content</strong> 属性</li></ul><h2 id="8-4、CSS3盒子box-sizing"><a href="#8-4、CSS3盒子box-sizing" class="headerlink" title="8.4、CSS3盒子box-sizing"></a>8.4、CSS3盒子box-sizing</h2><ul><li><p>CSS3 中可以通过<code>box-sizing</code> 来指定盒模型</p></li><li><p>第一种情况是 CSS 的盒子模型，盒子大小为 width + padding + border</p></li><li><p>此种情况盒子大小为 宽度 + 内边距 + 边框，这也是我们之前写盒子所默认的</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: content-box;</span><br></pre></td></tr></table></figure></li><li><p>第二种情况是 CSS3 的盒子模型，盒子大小为 width</p></li><li>此种情况盒子大小为 宽度，不包括内边距和边框，这样 padding 和 border 就不会撑大盒子了(前提是 padding 和 border 不会超过 width 宽度)<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-sizing</span>: border-box;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="comment">/*  这样的话padding和border就不会撑大盒子了 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="8-5、CSS3其他特性"><a href="#8-5、CSS3其他特性" class="headerlink" title="8.5、CSS3其他特性"></a>8.5、CSS3其他特性</h2><ol><li><p>filter函数</p> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">filter</span>: 函数();</span><br></pre></td></tr></table></figure> <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*高斯模糊处理*/</span></span><br><span class="line"><span class="attribute">filter</span>: <span class="built_in">blur</span>(xxx px)</span><br><span class="line"><span class="comment">/*数值越大，模糊越厉害*/</span></span><br></pre></td></tr></table></figure></li><li><p>calc函数</p></li></ol><ul><li><p><code>calc()</code> 此CSS函数让你在声明CSS属性值时执行一些计算</p>  <figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*计算盒子宽度 */</span></span><br><span class="line"><span class="attribute">width</span>:<span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">10px</span>); </span><br></pre></td></tr></table></figure><p>  括号里面可以使用 + - * / 来进行计算</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记-进阶</title>
      <link href="/posts/2022-07-13-CSS%E7%AC%94%E8%AE%B0-%E8%BF%9B%E9%98%B6.html"/>
      <url>/posts/2022-07-13-CSS%E7%AC%94%E8%AE%B0-%E8%BF%9B%E9%98%B6.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、CSS的三大特性"><a href="#一、CSS的三大特性" class="headerlink" title="一、CSS的三大特性"></a>一、CSS的三大特性</h1><p><strong>层叠性、继承性、优先性</strong></p><h2 id="1-1、层叠性"><a href="#1-1、层叠性" class="headerlink" title="1.1、层叠性"></a>1.1、层叠性</h2><ul><li>相同选择器设置相同的样式，此时一个样式就会<strong>覆盖</strong>另一个冲突的样式。</li><li>层叠性主要解决样式冲突的问题</li><li>层叠性原则：<ul><li>样式冲突，遵循就近原则**（离作用处近的）</li></ul></li></ul><h2 id="1-2、继承性"><a href="#1-2、继承性" class="headerlink" title="1.2、继承性"></a>1.2、继承性</h2><ul><li>CSS中的继承：子标签会继承父标签里面的某些样式，如<strong>文本颜色和字号</strong>等</li><li>行高的特殊继承：</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">font</span>:<span class="number">12px</span>/<span class="number">1.5</span>   Microsoft YaHei</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 1.5的意思：让里面所有的子元素的行高是当前文字大小的1.5倍 */</span></span><br></pre></td></tr></table></figure><h2 id="1-3、优先级"><a href="#1-3、优先级" class="headerlink" title="1.3、优先级"></a>1.3、优先级</h2><ul><li>当同一个元素指定多个选择器，就会有优先级的产生</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">         <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">color</span>:pink;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="selector-class">.text</span> &#123;</span><br><span class="line">         <span class="attribute">color</span>:red;</span><br><span class="line">         &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">      &lt;<span class="selector-tag">div</span> class=&quot;text&quot;&gt;你笑起来真好看&lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&lt;/<span class="selector-tag">body</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>选择器相同，则执行<strong>层叠性</strong></li><li>选择器不同，则按<strong>权重</strong></li></ul><div class="table-container"><table><thead><tr><th>选择器</th><th>权重</th></tr></thead><tbody><tr><td>继承或者 *</td><td>0，0，0，0</td></tr><tr><td>元素选择器（标签选择器）</td><td>0，0，0，1</td></tr><tr><td>类选择器，伪类选择器</td><td>0，0，1，0</td></tr><tr><td>ID选择器</td><td>0，1，0，0</td></tr><tr><td>行内样式style=””</td><td>1，0，0，0</td></tr><tr><td>！important重要的</td><td>无穷大</td></tr></tbody></table></div><ul><li>等级判断是从左到右，如果某一位数值相同，则判断下一位数值</li><li>权重可以叠加，<strong>但是永远不会有进位</strong></li><li><p><strong>继承的权重是0</strong>，如果该元素没有直接选中，不管父元素权重多高，子元素得到的权重都是0。</p><h1 id="二、盒子模型"><a href="#二、盒子模型" class="headerlink" title="二、盒子模型"></a>二、盒子模型</h1></li></ul><p>分为border(边框)、content(内容)、padding(内边距)、margin(外边距)<br><img src="https://s3.bmp.ovh/imgs/2022/09/30/e02a4ec5a2edb3b5.png" alt=""></p><h2 id="2-1、边框border"><a href="#2-1、边框border" class="headerlink" title="2.1、边框border"></a>2.1、边框border</h2><ul><li>CSS 边框属性指定一个元素边框的样式和颜色，边框由三部分组成：边框宽度（粗细） 边框样式 边框颜色</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span> : borde-width || border-style || border-color</span><br><span class="line"><span class="comment">/* 边框的复合写法 ， 没有先后顺序之分*/</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位是px</td></tr><tr><td>border-style</td><td>边框的样式</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table></div><h3 id="2-1-1、border-style"><a href="#2-1-1、border-style" class="headerlink" title="2.1.1、border-style"></a>2.1.1、border-style</h3><p>边框样式 border-style可以设置如下值：</p><ol><li><code>none</code>:没有边框即忽略所有边框的宽度（默认值）</li><li><code>solid</code> :边框为单实线（最为常用的）</li><li><code>dashed</code>: 边框为虚线</li><li><code>dotted</code>: 边框为点线</li></ol><h3 id="2-1-2、border-collapse"><a href="#2-1-2、border-collapse" class="headerlink" title="2.1.2、border-collapse"></a>2.1.2、border-collapse</h3><ul><li>border-collapse 属性控制相邻单元格的边框，是表格的细线边框</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span> : collapse;</span><br></pre></td></tr></table></figure><ul><li>表示相邻边框合并在一起</li></ul><h3 id="2-1-3、边框会影响盒子实际大小"><a href="#2-1-3、边框会影响盒子实际大小" class="headerlink" title="2.1.3、边框会影响盒子实际大小"></a>2.1.3、边框会影响盒子实际大小</h3><p>边框会额外增加盒子的实际大小，因此我们有两种方案解决：</p><ol><li>测量盒子大小的时候，不量边框</li><li>如果测量的时候包含了边框，则需要 width/height 减去边框宽度</li></ol><h2 id="2-2、内边距padding"><a href="#2-2、内边距padding" class="headerlink" title="2.2、内边距padding"></a>2.2、内边距padding</h2><ul><li>用于设置内边距,即盒子边框与内容之间的距离</li></ul><div class="table-container"><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>padding-left</td><td>左内边距</td></tr><tr><td>padding-right</td><td>右内边距</td></tr><tr><td>padding -top</td><td>上内边距</td></tr><tr><td>padding-bottom</td><td>下内边距</td></tr></tbody></table></div><ul><li>padding属性(简写属性)可以有一到四个值</li></ul><div class="table-container"><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>padding : 5px;</td><td>1个值，代表<strong>上下左右</strong>都有5像素内边距</td></tr><tr><td>padding :5px 10px;</td><td>2个值，代表上下内边距是5像素，左右内边距是10像素</td></tr><tr><td>padding: 5px 10px 20px;</td><td>3个值，代表上内边距5像素，左右内边距10像素，下内边距20像素</td></tr><tr><td>padding :5px 10px 20px 30px</td><td>4个值，上是5像素，右是10像素，下20像素，左是30像素，顺时针</td></tr></tbody></table></div><ul><li><p>padding会影响盒子大小的情况：如果盒子已经有了宽度和高度，此时再指定内边框，会撑大盒子。若要保证盒子跟效果图大小保持一致，则让 width/height 减去多出来的内边距大小即可。</p></li><li><p>padding不会影响盒子大小的情况：如果盒子本身没有指定width/height属性，则此时padding不会撑开盒子大小。</p></li></ul><h2 id="2-3、外边距margin"><a href="#2-3、外边距margin" class="headerlink" title="2.3、外边距margin"></a>2.3、外边距margin</h2><ul><li><p>用于设置外边距，即控制盒子和盒子之间的距离</p></li><li><p>margin 简写方式代表的意义跟 padding 完全一致</p></li></ul><h3 id="2-3-1、外边距典型应用"><a href="#2-3-1、外边距典型应用" class="headerlink" title="2.3.1、外边距典型应用"></a>2.3.1、外边距典型应用</h3><p>外边距可以让<strong>块级盒子水平居中</strong>，但是必须满足两个条件。一是盒子必须制定了宽度(width)，二是盒子左右的外边距都设置为 auto。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>左右的外边距都设置为 auto 有三种写法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">margin-left</span>: auto; <span class="attribute">margin-right</span>: auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line"></span><br><span class="line"><span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br></pre></td></tr></table></figure><p>以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 text-align: center 即可。</p><h3 id="2-3-2、外边距合并"><a href="#2-3-2、外边距合并" class="headerlink" title="2.3.2、外边距合并"></a>2.3.2、外边距合并</h3><p>使用 margin 定义块级元素的垂直外边距时，可能会出现外边距的合并。<strong>「嵌套块元素垂直外边距的塌陷」</strong>  和  <strong>「嵌套块元素垂直外边距的塌陷」</strong></p><ol><li><p><strong>相邻块元素垂直外边距的合并</strong>。</p><p>当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 margin-bottom，下面的元素有上外边距 margin-top ，则他们之间的垂直间距不是 margin-bottom 与 margin-top 之和。*取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</p><p><img src="https://s3.bmp.ovh/imgs/2022/09/30/f14f39e852b19a17.png" alt=""></p><ul><li>我们尽量只给一个盒子添加 margin 值</li></ul></li><li><p><strong>嵌套块元素垂直外边距的塌陷</strong>。</p><p>对于两个嵌套关系（父子关系）的块元素，父元素有上外边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距值</p><p><img src="https://s3.bmp.ovh/imgs/2022/09/30/7ac1cf5dece8a104.png" alt=""></p><p>解决方案：</p><ol><li>可以为父元素定义上边框</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加 <code>overflow: hidden</code>（ 最优解）</li></ol><p>还有其他方法，比如浮动、固定、绝对定位的盒子不会有塌陷问题。</p></li></ol><h2 id="2-4、清除内外边距"><a href="#2-4、清除内外边距" class="headerlink" title="2.4、清除内外边距"></a>2.4、清除内外边距</h2><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-5、-圆角边框"><a href="#2-5、-圆角边框" class="headerlink" title="2.5、 圆角边框"></a>2.5、 圆角边框</h2><ul><li>border-radius 属性用于设置元素的外边框圆角。</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>:<span class="number">10px</span>;</span><br></pre></td></tr></table></figure><ul><li><code>radius</code>半径参数值可以是<strong>数值</strong>或<strong>百分比</strong>的形式</li><li>正方形要设置为一个圆，把数值修改为高度或者宽度的一半即可，或者直接写为50%</li><li>矩形要设置为一个圆，设置为高度的一半就可以</li><li>该属性是一个简写属性，可以跟四个值，分别代表左上, 右上，右下，左下</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">border-top-left-radius:</span></span><br><span class="line"><span class="comment">border-top-right-radius:</span></span><br><span class="line"><span class="comment">border-bottom-right-radius:</span></span><br><span class="line"><span class="comment">border-bottom-left-radius:</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="2-6、盒子阴影"><a href="#2-6、盒子阴影" class="headerlink" title="2.6、盒子阴影"></a>2.6、盒子阴影</h2><ul><li>box-shadow 属性用于为盒子添加阴影。</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置，允许负值</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置，允许负值</td></tr><tr><td>blur</td><td>可选。模糊距离 ， 即影子的虚实</td></tr><tr><td>spread</td><td>可选，阴影的尺寸 ， 即影子的大小</td></tr><tr><td>color</td><td>可选，阴影的颜色。</td></tr><tr><td>inset</td><td>可选，将外部阴影（outset）改为内部阴影</td></tr></tbody></table></div><p><strong>注意：</strong></p><ol><li>默认的是外阴影（outset），但是不可以在后面写这个单词，否则导致阴影无效</li><li>盒子阴影不占用空间，不会影响其他盒子排列</li></ol><h3 id="2-6-1、动态阴影"><a href="#2-6-1、动态阴影" class="headerlink" title="2.6.1、动态阴影"></a>2.6.1、动态阴影</h3><ul><li>原先盒子没有影子，当我们鼠标经过盒子就添加阴影效果</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">box-shadow</span>:<span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> -<span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>);         </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-6-1-、文本阴影"><a href="#2-6-1-、文本阴影" class="headerlink" title="2.6.1 、文本阴影"></a>2.6.1 、文本阴影</h3><ul><li>text-shadow 属性将阴影应用于文本</li></ul><figure class="highlight plaintext"><figcaption><span>css</span></figcaption><table><tr><td class="code"><pre><span class="line">text-shadow: h-shadow v-shadow blur color</span><br></pre></td></tr></table></figure><h1 id="三、浮动"><a href="#三、浮动" class="headerlink" title="三、浮动"></a>三、浮动</h1><h2 id="3-1、传统网页布局的三种方式"><a href="#3-1、传统网页布局的三种方式" class="headerlink" title="3.1、传统网页布局的三种方式"></a>3.1、传统网页布局的三种方式</h2><p>CSS 的三种传统布局方式：普通流（标准流） 、浮动 、 定位</p><h2 id="3-2、浮动的使用"><a href="#3-2、浮动的使用" class="headerlink" title="3.2、浮动的使用"></a>3.2、浮动的使用</h2><ul><li><code>float</code>属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘（先确定浮动的方位，然后吸附在盒子的边缘上）</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    <span class="attribute">float</span>: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table></div><ul><li>网页布局的第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动</li><li>网页布局第二准则：先设置盒子大小，之后设置盒子的位置。</li></ul><h2 id="3-3、-浮动的特性"><a href="#3-3、-浮动的特性" class="headerlink" title="3.3、 浮动的特性"></a>3.3、 浮动的特性</h2><ol><li><strong>脱标：脱离标准流的控制，移动到指定位置</strong><ul><li>浮动的盒子不再保留原先的位置</li></ul></li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/09/30/289f4d55834530b0.png" alt="float1"></p><ol><li><strong>如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列</strong></li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/09/30/9336a2cf6034e27c.png" alt="float2"></p><ul><li>浮动的元素是相互贴靠在一起的，如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</li></ul><ol><li><strong>浮动元素会具有行内块元素特性</strong></li></ol><p>任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后都具有<strong>行内块元素</strong>相似的特性。</p><ul><li>如果块级盒子没有设置宽度，默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>如果行内元素有了浮动，则不需要转换块级/行内块元素就可以直接给高度和宽度</li><li>浮动的盒子中间是没有缝隙的，是紧挨着一起的</li></ul><h2 id="3-4、-浮动元素和标准流父级搭配使用"><a href="#3-4、-浮动元素和标准流父级搭配使用" class="headerlink" title="3.4、 浮动元素和标准流父级搭配使用"></a>3.4、 浮动元素和标准流父级搭配使用</h2><p>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</p><p><img src="https://s3.bmp.ovh/imgs/2022/09/30/3052059e93a41d17.png" alt="float3"></p><h2 id="3-5、-浮动的注意点"><a href="#3-5、-浮动的注意点" class="headerlink" title="3.5、 浮动的注意点"></a>3.5、 浮动的注意点</h2><p>1.浮动和标准流的父盒子搭配。</p><ul><li>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置</li></ul><p>2.一个元素浮动了，理论上其余的兄弟元素也要浮动。</p><ul><li>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止起问题。</li><li>浮动的盒子只会影响浮动盒子后面的标准流不会影响前面的标准流</li></ul><h2 id="3-6、清除浮动的本质"><a href="#3-6、清除浮动的本质" class="headerlink" title="3.6、清除浮动的本质"></a>3.6、清除浮动的本质</h2><ul><li>如果父盒子本身有高度，则不需要清除浮动</li><li>清除浮动后，父级就会根据浮动的子盒子自动检测高度，父级有了高度就不会影响下面的标准流</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    <span class="attribute">clear</span>: 属性值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素(清除左侧浮动的影响)</td></tr><tr><td>right</td><td>不允许右侧有浮动元素(清除右侧浮动的影响)</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table></div><ul><li>我们实际工作中，几乎只用<code>clear:both</code></li><li>清除浮动的策略是：闭合浮动</li><li>只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子。</li></ul><h2 id="3-7、清除浮动的方法"><a href="#3-7、清除浮动的方法" class="headerlink" title="3.7、清除浮动的方法"></a>3.7、清除浮动的方法</h2><ol><li>额外标签法</li></ol><ul><li>额外标签法会在浮动元素末尾添加一个空的标签,例如：<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>，或者其他标签（如<code>&lt;/br&gt;</code>等）</li><li>注意：要求这个新的空标签必须是块级元素</li></ul><ol><li>overflow</li></ol><ul><li>给父级添加<code>overflow</code>属性，将其属性值设置为<code>hidden</code>,<code>auto</code>或<code>scroll</code></li></ul><ol><li><code>:after</code>伪元素法</li></ol><ul><li><code>:after</code> 方式是额外标签法的升级版。也是给父元素添加</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">      *zoom:<span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.双伪元素</p><ul><li>也是给父元素添加</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,<span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">   <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="attribute">display</span>:table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">     <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">  *zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="四、定位"><a href="#四、定位" class="headerlink" title="四、定位"></a>四、定位</h1><p>将盒子定在某一个位置，所以定位也是在摆放盒子，按照定位的方式移动盒子。</p><p>实现某个元素可以自由的在一个盒子内移动位置，并且压住其他盒子，当我们滚动窗口的时候，盒子是固定屏幕某个位置的。</p><h2 id="4-1-、定位的组成"><a href="#4-1-、定位的组成" class="headerlink" title="4.1 、定位的组成"></a>4.1 、定位的组成</h2><p>定位 = 定位模式 +边偏移</p><ul><li>定位模式用于指定一个元素在文档中的定位方式</li><li>边偏移则决定了该元素的最终位置</li></ul><ol><li><p>定位模式</p><p>通过 CSS 的 <code>position</code>属性来设置</p><p>| 值       | 语义     |<br>| ———— | ———— |<br>| static   | 静态定位 |<br>| relative | 相对定位 |<br>| absolute | 绝对定位 |<br>| fixed    | 固定定位 |</p></li><li><p>位偏移</p><p>| 边偏移属性 |       描述                               |<br>| ————— | ———————————————————-|<br>| top        |顶端偏移量，定义元素相对于其父元素的上边线的距离 |<br>| bottom     |底部偏移量，定义元素相对于其父元素的下边线的距离 |<br>| right      |右侧偏移量，定义元素相对于其父元素右边线的距离   |<br>| left       |左侧偏移量，定义元素相对于其父元素左边线的距离   |</p></li></ol><h2 id="4-2、静态定位static-了解"><a href="#4-2、静态定位static-了解" class="headerlink" title="4.2、静态定位static(了解)"></a>4.2、静态定位static(了解)</h2><ul><li>静态定位是元素的<strong>默认定位方式，无定位</strong>的意思</li><li>静态定位没有边偏移</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line"><span class="attribute">position</span>: static;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3、相对定位relative"><a href="#4-3、相对定位relative" class="headerlink" title="4.3、相对定位relative"></a>4.3、相对定位relative</h2><ul><li>特点：<ul><li>它是相对于自己原来的位置来移动的</li><li>原来在标准流的位置继续占有，后面的盒子仍然以标准流的方式对待</li><li>因此，相对定位并没有脱标，它最典型的应用是给绝对定位当爹的</li></ul></li></ul><h2 id="4-4、绝对定位absolute"><a href="#4-4、绝对定位absolute" class="headerlink" title="4.4、绝对定位absolute"></a>4.4、绝对定位absolute</h2><ul><li>绝对定位是元素在移动位置的时候，是相对于它的父元素来说的</li><li>特点：<ul><li>如果没有父元素，或者父元素没定位，则以浏览器为准进行定位</li><li>如果父级有定位(相对、绝对、固定定位)，则以最近一级的有定位父元素为参考点移动位置</li><li>绝对定位不再占用原先的位置（脱标），所以绝对定位是脱离标准流的</li></ul></li></ul><p><strong>绝对定位盒子水平居中</strong></p><ul><li>加了绝对定位的盒子不能通过<code>margin: 0 auto</code>水平居中</li><li>但是可以通过以下计算方法实现水平和垂直居中<ul><li><code>left:50%</code> ； 让盒子的左侧移动到父级元素的水平中心位置</li><li><code>margin-left: -100px</code>; 让盒子向左移动自身宽度的一半</li></ul></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="comment">/* 1.left走50%，父容器宽度的一半 */</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="comment">/* 2.margin 负值往左边走 自己盒子宽度的一半 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-5、子绝父相"><a href="#4-5、子绝父相" class="headerlink" title="4.5、子绝父相"></a>4.5、子绝父相</h2><p><strong>子级使用绝对定位，父级则需要相对定位</strong></p><ol><li><p>子级绝对定位，不会占有位置，可以放到父盒子里面的任何一个地方，不会影响其他的兄弟盒子。</p></li><li><p>父盒子需要加定位限制子盒子在父盒子内显示</p></li><li><p>父盒子布局时，需要占有位置，因此父只能是相对定位。</p></li></ol><h2 id="4-6、固定定位fixed"><a href="#4-6、固定定位fixed" class="headerlink" title="4.6、固定定位fixed"></a>4.6、固定定位fixed</h2><p>固定定位是元素固定于浏览器的可视区的位置</p><p>主要使用场景： 可以在浏览器页面滚动时元素的位置不会改变</p><p>特点：</p><ul><li>以浏览器的可视窗口为参照点移动元素</li><li>跟父元素没有任何关系</li><li>不随滚动条滚动</li><li>固定定位<strong>不再占有原先的位置</strong>(脱标)</li></ul><p>固定定位也是脱标的，其实固定定位也可以看做是一种特殊的绝对定位。</p><ul><li>固定定位小技巧： 固定在版心右侧位置</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="comment">/* 1.left走50%，父容器宽度的一半 */</span></span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="comment">/* 2.margin 负值往左边走 自己盒子宽度的一半 */</span></span><br><span class="line">    <span class="attribute">margin-left</span>: -xx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-7、定位叠放z-index"><a href="#4-7、定位叠放z-index" class="headerlink" title="4.7、定位叠放z-index"></a>4.7、定位叠放z-index</h2><ul><li>用 z-index 来控制盒子的前后次序(z轴向外)，防止盒子重叠</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>数值是整数，默认是auto</li><li>属性值相同，则按照书写顺序，后来居上</li><li>数字后面不能加单位</li><li>只有定位的盒子才有 z-index 属性</li></ol><h2 id="4-8、定位扩展"><a href="#4-8、定位扩展" class="headerlink" title="4.8、定位扩展"></a>4.8、定位扩展</h2><ol><li><p><strong>绝对定位的盒子居中</strong></p><ul><li><p>加了绝对定位的盒子不能通过 <code>margin: 0 auto</code> 水平居中</p></li><li><p>可通过该方法实现居中</p><ul><li><p>left: 50%; 让盒子的左侧移动父级元素的一半</p></li><li><p>margin-left: -xxx px 让盒子向左移动自身宽度的一半</p></li></ul></li></ul></li></ol><ol><li><p><strong>定位特殊特性</strong></p><ul><li><p>行内元素添加绝对或者固定定位，可以直接设置高度和宽度</p></li><li><p>块级元素添加绝对或者固定定位，如果不给宽度或者高度，默认大小是内容的大小。</p></li></ul></li></ol><ol><li><p><strong>脱标的盒子不会触发外边距塌陷</strong></p><ul><li>浮动元素、绝对定位(固定定位)元素都不会触发外边距合并的问题。</li></ul></li></ol><ol><li><p><strong>绝对定位(固定定位)会完全压住盒子</strong></p><ul><li><p>浮动元素不同，只会压住它下面标准流的盒子，但是不会压住下面标准流盒子里面的文字（图片） ，即文字具有环绕效果</p></li><li><p>绝对定位（固定定位） 会压住下面标准流所有的内容。</p></li></ul></li></ol><h1 id="五、元素的隐藏与显示"><a href="#五、元素的隐藏与显示" class="headerlink" title="五、元素的隐藏与显示"></a>五、元素的隐藏与显示</h1><h2 id="5-1、display显示隐藏"><a href="#5-1、display显示隐藏" class="headerlink" title="5.1、display显示隐藏"></a>5.1、display显示隐藏</h2><p><code>display</code>用于设置一个元素应如何显示</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">display</span>: none/block;  </span><br><span class="line"><span class="comment">/*隐藏对象/显示元素*/</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>display</code>隐藏元素后，不再占有原来的位置</strong></li></ul><h2 id="5-2、visibility可见性"><a href="#5-2、visibility可见性" class="headerlink" title="5.2、visibility可见性"></a>5.2、visibility可见性</h2><p><code>visibility</code>用于指定一个元素应可见还是隐藏</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">visibility</span>: visible/hidden; </span><br><span class="line"><span class="comment">/*元素可视/元素隐藏*/</span></span><br></pre></td></tr></table></figure><ul><li><strong><code>visibility</code> 隐藏元素后，继续占有原来的位置。</strong></li><li>如果隐藏元素想要原来位置， 就用 <code>visibility：hidden</code></li><li>如果隐藏元素不想要原来位置， 就用 <code>display：none</code> </li></ul><h2 id="5-3、overflow溢出显示隐藏"><a href="#5-3、overflow溢出显示隐藏" class="headerlink" title="5.3、overflow溢出显示隐藏"></a>5.3、overflow溢出显示隐藏</h2><p><code>overflow</code> 属性指定了如果内容溢出一个元素的框（超过其指定高度及宽度） 时，会发生什么。</p><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>visible</td><td>不剪切内容也不添加滚动条</td></tr><tr><td>hidden</td><td>不显示超过对象尺寸的内容，超出的部分隐藏掉</td></tr><tr><td>scroll</td><td>不管超出内容否，总是显示滚动条</td></tr><tr><td>auto</td><td>超出自动显示滚动条，不超出不显示滚动条</td></tr></tbody></table></div><p><strong>有定位的盒子， 请慎用 <code>overflow:hidden</code> 因为它会隐藏多余的部分。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习笔记</title>
      <link href="/posts/2022-02-24-python.html"/>
      <url>/posts/2022-02-24-python.html</url>
      
        <content type="html"><![CDATA[<h1 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符(\)"></a>转义字符(\)</h1><ul><li><code>\n</code>换行</li><li><code>\t</code>空一个制表符的位置</li><li><code>\b</code>退一个格</li><li><code>\r</code>回车</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello\bworld&quot;</span>)</span><br><span class="line"><span class="comment">#输出world，world将hello覆盖</span></span><br></pre></td></tr></table></figure><p>原字符：让转义字符失效，即在字符串前加上r或R。但是字符串的结尾不能有\<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">例如：</span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;hello\bworld&quot;</span>)</span><br><span class="line"><span class="comment">#输出hello\bworld</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;hello\bworld\&quot;)</span></span><br><span class="line"><span class="string">#报错：SyntaxError: EOL while scanning string literal</span></span><br></pre></td></tr></table></figure></p><hr><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><ul><li>int：整型</li><li>float：浮点数型</li><li>bool：布尔类型 ——&gt;Ture、False</li><li>str：字符串类型</li></ul><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><p>二进制0b——数值转换bin()<br>八进制0o——数值转换oct()<br>十六进制0x——数值转换hex()</p><h2 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h2><p>对于浮点型的 计算，部分计算会存在不精确的情况</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1.1+2.2&quot;</span>) <span class="comment">#3.3000000000000003</span></span><br></pre></td></tr></table></figure><p>以此需先导入库<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> decimal <span class="keyword">import</span> Decimal</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1.1+2.2&quot;</span>) <span class="comment">#3.3</span></span><br></pre></td></tr></table></figure></p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>使用单引号，双引号，三引号都可以。但是只有三引号的字符串可以分两行来写</p><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>二进制0b——数值转换bin()<br>八进制0o——数值转换oct()<br>十六进制0x——数值转换hex()</p><p>str()——转换成字符串类型<br>int()——转换成整型，含文字和小数点的字符串无法转换，小数转换时抹零取整</p><p>float()——转换成浮点型，整数加”.0”</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul><li><p>列表的索引—<a href="#jump">跳到index函数</a>—</p><ul><li><p>正索引：第一个元素下标为0</p></li><li><p>负索引：最后一个元素下标为-1</p></li></ul></li><li><p>列表的切片（一次性获取多个元素）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">列表名[start: stop: step]<span class="comment"># 含start不含stop</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>单行注释用：#</p><p>代码块注释：’’‘</p><p>中文编码声明注释：在文件开头写上 <code>#coding:gdk</code>（无需理会）</p><hr><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul><li><p>input函数输入的是str类型，计算时应转换成int类型</p></li><li><p>range函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">range</span>(start,stop,step)</span><br><span class="line"><span class="comment"># start默认为0，step(步长)默认为1</span></span><br></pre></td></tr></table></figure></li><li><p><a id="jump">index函数</a></p><p>用于列表元素的索引，当其中有相同元素时，只返回第一个元素的下标值</p><p>index其他用法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">index(<span class="string">&quot;对象&quot;</span>，开始目标下标，结束目标下标)</span><br></pre></td></tr></table></figure></li></ul><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><ul><li><p>“/“是除法运算，”//“是整除（即向下取整）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">11</span>//<span class="number">2</span>)   <span class="comment">#结果是5</span></span><br><span class="line"><span class="built_in">print</span>(-<span class="number">11</span>//<span class="number">2</span>)  <span class="comment">#结果是-6</span></span><br></pre></td></tr></table></figure></li><li><p>“ ** “是幂运算</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2**2&quot;</span>)  <span class="comment">#即2的2次方</span></span><br></pre></td></tr></table></figure></li><li>“ % “求余运算   </li><li>解包赋值，同时解包赋值利于数值的交换          <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a,b,c=<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span></span><br><span class="line"><span class="comment">#a=10 b=20 c=30</span></span><br><span class="line"></span><br><span class="line">a,b=<span class="number">10</span>,<span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(a,b)<span class="comment">#10 20</span></span><br><span class="line">a,b=b,a    <span class="comment">#直接交换</span></span><br><span class="line"><span class="built_in">print</span>(a,b) <span class="comment">#20 10</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>比较运算符的输出结果是”bool”类型，即 false 或 true</li></ul><ul><li><p>比较对象的id用” is “</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="number">20</span></span><br><span class="line"><span class="built_in">print</span>(a <span class="keyword">is</span> b)<span class="comment">#false</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>布尔运算</p><ul><li>“ and “:全为真才为真</li><li>“ or “有一真即为真</li><li>“ not “对运算</li><li>“ in “内运算</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> a,b=<span class="number">1</span>,<span class="number">2</span></span><br><span class="line"> <span class="built_in">print</span>(a==<span class="number">1</span> <span class="keyword">and</span> b==<span class="number">2</span>)<span class="comment">#ture</span></span><br><span class="line"> <span class="built_in">print</span>(a==<span class="number">1</span> <span class="keyword">and</span> b&lt;<span class="number">2</span>)<span class="comment">#flase</span></span><br><span class="line"> <span class="built_in">print</span>(a==<span class="number">1</span> <span class="keyword">or</span> b&lt;<span class="number">2</span>)<span class="comment">#ture</span></span><br><span class="line"> -------------------------------------</span><br><span class="line"> f=ture</span><br><span class="line"> p=false</span><br><span class="line"> <span class="built_in">print</span>(<span class="keyword">not</span> f)<span class="comment">#ture</span></span><br><span class="line"> -------------------------------------</span><br><span class="line">s=<span class="string">&quot;hello&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;l&#x27;</span> <span class="keyword">in</span> s)<span class="comment">#ture</span></span><br></pre></td></tr></table></figure></li><li><p>位运算：将数字转换成二进制进行运算——<a href="https://blog.csdn.net/meng_xin_true/article/details/103548077">查看更多详情</a>——</p><ul><li>位与&amp;：对应数位为1时，结果才为1</li><li>位或|：对应数位有一个为1时，结果为1</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">4</span>&amp;<span class="number">8</span>)<span class="comment">#结果为0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span>|<span class="number">8</span>)<span class="comment">#结果为12</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>左移位” &lt;&lt; “：高位溢出，低位补零</li><li>右移位” &lt;&lt; “：低位溢出，高位补零</li><li>运算顺序：算术——位运算——比较——布尔——赋值</li></ul><hr><h1 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h1><p>python里面没有” { } “,要注意缩进问题</p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><ul><li><p>if语句后要加冒号</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件句:</span><br><span class="line">执行句<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">执行句<span class="number">2</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>if多分支</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件句<span class="number">1</span>:</span><br><span class="line">执行句<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 条件句<span class="number">2</span>:</span><br><span class="line">执行句<span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> 条件句<span class="number">3</span>:</span><br><span class="line">执行句<span class="number">3</span></span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    执行句<span class="number">4</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x <span class="keyword">if</span> 条件判断式 <span class="keyword">else</span> y</span><br><span class="line"><span class="comment"># 如果条件成立，输出 x</span></span><br><span class="line"><span class="comment"># 如果条件不成立，输出 y</span></span><br></pre></td></tr></table></figure><h3 id="pass表达式"><a href="#pass表达式" class="headerlink" title="pass表达式"></a>pass表达式</h3><ul><li>用于代码还未成型时占位防报错</li></ul><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><ul><li>需要加冒号</li><li>注意缩进</li></ul><h3 id="for-in结构"><a href="#for-in结构" class="headerlink" title="for-in结构"></a>for-in结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> b</span><br><span class="line"><span class="comment"># 把b中每一个值依次赋予a</span></span><br><span class="line">    <span class="comment"># 当不需要自定义变量时用“ _ ”代替</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS笔记-基础</title>
      <link href="/posts/2022-02-03-CSS%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80.html"/>
      <url>/posts/2022-02-03-CSS%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、标签基础选择器"><a href="#一、标签基础选择器" class="headerlink" title="一、标签基础选择器"></a>一、标签基础选择器</h1><p>在<code>&lt;head&gt;&lt;/head&gt;</code>标签内写上<code>&lt;style&gt;&lt;/style&gt;</code>标签，再在其中写入css选择器，<code>&lt;ul&gt;</code>标签位于<code>&lt;body&gt;</code>内。     </p><h2 id="1-1、标签选择器"><a href="#1-1、标签选择器" class="headerlink" title="1.1、标签选择器"></a>1.1、标签选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">标签名 &#123;</span><br><span class="line">    属性<span class="number">1</span>： 属性值<span class="number">1</span>：</span><br><span class="line">    属性<span class="number">2</span>：属性值<span class="number">2</span>：</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>为页面中某一类标签快速指定统一的CSS样式     </p></li><li><p>属性值前面，冒号后面，保留一个空格.标签名和大括号中间保留空格</p></li></ul><h2 id="1-2、类选择器"><a href="#1-2、类选择器" class="headerlink" title="1.2、类选择器"></a>1.2、类选择器</h2><ul><li>差异化选择不同的标签，单独选一个或者几个标签</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">.类名 &#123;</span><br><span class="line">    属性<span class="number">1</span>： 属性值<span class="number">1</span>；</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line">例如：</span><br><span class="line"><span class="selector-class">.red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>同时结构需要用class属性来调用   <figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> class=&#x27;red&#x27;&gt; 变红色的字体 &lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure></li><li>先添加类，后针对具体需要进行调用    </li></ul><h2 id="1-3、id选择器"><a href="#1-3、id选择器" class="headerlink" title="1.3、id选择器"></a>1.3、id选择器</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span> id=&quot;red&quot;&gt;变红&lt;/<span class="selector-tag">div</span>&gt;</span><br></pre></td></tr></table></figure><ul><li>id选择器只能被调用一次    </li><li>id选择器通常用于页面唯一属性上且与js联合使用    </li></ul><h2 id="1-4、通配符选择器"><a href="#1-4、通配符选择器" class="headerlink" title="1.4、通配符选择器"></a>1.4、通配符选择器</h2><p>以 * 定义，自动应用于页面所有元素    </p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">   属性<span class="number">1</span>：属性<span class="number">2</span>；</span><br><span class="line">   ···</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二、字体属性"><a href="#二、字体属性" class="headerlink" title="二、字体属性"></a>二、字体属性</h1><h2 id="2-1、font-family"><a href="#2-1、font-family" class="headerlink" title="2.1、font-family"></a>2.1、font-family</h2><ul><li>设置字体类型</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123; </span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&quot;微软雅黑&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">    <span class="attribute">font-family</span>:Arial,<span class="string">&quot;Microsoft Yahe&quot;</span>,<span class="string">&quot;微软雅黑&quot;</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号                   </li></ul><h2 id="2-2、font-size"><a href="#2-2、font-size" class="headerlink" title="2.2、font-size"></a>2.2、font-size</h2><ul><li>设置字体大小</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>谷歌浏览器默认的文字大小为 16px</li></ul><h2 id="2-3、font-weight"><a href="#2-3、font-weight" class="headerlink" title="2.3、font-weight"></a>2.3、font-weight</h2><ul><li>设置文字粗细</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">   <span class="attribute">font-weight</span>: normal/bold/···;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">/* 属性值的大小为100~900 */</span></span><br></pre></td></tr></table></figure><h2 id="2-4、font-style"><a href="#2-4、font-style" class="headerlink" title="2.4、font-style"></a>2.4、font-style</h2><ul><li>设置文字样式</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">normal</td><td style="text-align:center">默认值，浏览器会显示标准的字体样式</td></tr><tr><td style="text-align:center">italic</td><td style="text-align:center">浏览器会显示<strong>斜体</strong>的字体样式</td></tr></tbody></table></div><h2 id="2-5、字体属性复合写法"><a href="#2-5、字体属性复合写法" class="headerlink" title="2.5、字体属性复合写法"></a>2.5、字体属性复合写法</h2><p>字体复合属性可以把以上文字样式综合来写，这样写更节约代码，例如：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">        <span class="comment">/* 想要div 文字变倾斜 加粗 字号为18像素 且为微软雅黑 */</span></span><br><span class="line">        </span><br><span class="line">        <span class="selector-tag">div</span> &#123;</span><br><span class="line">            <span class="attribute">font-style</span>: italic;</span><br><span class="line">            <span class="attribute">font-weight</span>: <span class="number">700</span>;</span><br><span class="line">            <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">            <span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft yahe&#x27;</span>;</span><br><span class="line">            <span class="comment">/* 复合属性：简写的方式  节约代码 */</span></span><br><span class="line">            <span class="comment">/* 顺序：font-style font-weight  font-size/line-height  font-family */</span></span><br><span class="line">            <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">16px</span> <span class="string">&#x27;Microsoft yahe&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ul><li><p><strong>顺序：文字样式 文字粗细 文字大小 文字字体</strong></p></li><li><p>使用font属性时，必须按照上面语法格式中的顺序书写，<strong>不能更换顺序</strong>，并且各个属性间<strong>以空格</strong>隔开</p></li><li><p>不需要设置的属性可以省略(取默认值)，但必须保留<code>font-size</code> 和<code>font-family</code>属性，否则 font 属性将不起作用</p></li></ul><h1 id="三、文本属性（外观）"><a href="#三、文本属性（外观）" class="headerlink" title="三、文本属性（外观）"></a>三、文本属性（外观）</h1><h2 id="3-1、color"><a href="#3-1、color" class="headerlink" title="3.1、color"></a>3.1、color</h2><ul><li>定义文本的颜色</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;<span class="comment">/* 实际开发中常用十六进制 */</span></span><br></pre></td></tr></table></figure><h2 id="3-2、text-align"><a href="#3-2、text-align" class="headerlink" title="3.2、text-align"></a>3.2、text-align</h2><ul><li>设置文本内容的水平对齐方式</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>:center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3、text-decoration"><a href="#3-3、text-decoration" class="headerlink" title="3.3、text-decoration"></a>3.3、text-decoration</h2><ul><li>text-decoration 属性用于装饰文本，可以给文本添加下划线，删除线，上划线等</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">none</td><td style="text-align:center">默认。没有装饰线(最常用)</td></tr><tr><td style="text-align:center">underline</td><td style="text-align:center">下划线，链接自带下划线（常用）</td></tr><tr><td style="text-align:center">overline</td><td style="text-align:center">上划线(几乎不用)</td></tr><tr><td style="text-align:center">line-through</td><td style="text-align:center">删除线</td></tr></tbody></table></div><ul><li>取消网站链接默认下划线🌟<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125; <span class="comment">/* 取消a默认的下划线 */</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-4、text-indent"><a href="#3-4、text-indent" class="headerlink" title="3.4、text-indent"></a>3.4、text-indent</h2><ul><li>用于指定文本的首行缩进，通常是将段落的首行缩进</li><li>通过设置该属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值     </li><li>em是一个相对单位，就是当前元素(font-size)1个文字的大小</li><li>如果当前元素没有设置大小，则会按照父元素的一个文字大小</li></ul><h2 id="3-5、line-height"><a href="#3-5、line-height" class="headerlink" title="3.5、line-height"></a>3.5、line-height</h2><ul><li>设置行间的距离(行高)</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">   <span class="attribute">line-height</span>: <span class="number">26px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>行间距包括上间距、文本高度、下间距</li></ul><h1 id="四、CSS复合选择器"><a href="#四、CSS复合选择器" class="headerlink" title="四、CSS复合选择器"></a>四、CSS复合选择器</h1><p>复合选择器：是由两个或多个基础选择器，通过不同的方式组合而成的</p><p>常用的复合选择器包括：后代选择器、子选择器、并集选择器、伪类选择器</p><h2 id="4-1、后代选择器"><a href="#4-1、后代选择器" class="headerlink" title="4.1、后代选择器"></a>4.1、后代选择器</h2><ul><li>后代选择器又称为包含选择器，<strong>可以选择父元素里面的子元素</strong></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">元素<span class="number">1</span> 元素<span class="number">2</span> &#123;</span><br><span class="line">    样式声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示<strong>选择元素1里面的所有元素2(后代元素)</strong>，例如</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择ul 里面的所有 li 标签元素*/</span></span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    </span><br><span class="line">    样式声明</span><br><span class="line">    </span><br><span class="line">&#125;     </span><br></pre></td></tr></table></figure><h2 id="4-2、子元素选择器"><a href="#4-2、子元素选择器" class="headerlink" title="4.2、子元素选择器"></a>4.2、子元素选择器</h2><ul><li>子元素选择器只能选择作为某元素的最近一级子元素，简单理解就是选亲儿子元素。</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">元素<span class="number">1</span> &gt; 元素<span class="number">2</span>&#123;</span><br><span class="line">    样式声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述语法表示<strong>选择元素1 里面的所有直接后代(子元素)元素2</strong>，例如</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择div里面所有最近一级 P 标签元素*/</span></span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">p</span>&#123;</span><br><span class="line">    声明</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3、并集选择器"><a href="#4-3、并集选择器" class="headerlink" title="4.3、并集选择器"></a>4.3、并集选择器</h2><p><strong>并集选择器可以选择多组标签，同时为它们定义相同的样式。</strong></p><ul><li>任何形式的选择器都可以作为并集选择器的一部分</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">元素<span class="number">1</span>,元素<span class="number">2</span> &#123;</span><br><span class="line">    样式声明</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>上述语法表示<strong>选择元素1和元素2</strong>，例如</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*选择  ul 、div 和 .hot的ul标签元素 */</span></span><br><span class="line"><span class="selector-tag">ul</span> , <span class="selector-tag">div</span> ,<span class="selector-class">.hot</span> <span class="selector-tag">ul</span>  &#123;</span><br><span class="line">    样式声明</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="4-4、链接伪类选择器"><a href="#4-4、链接伪类选择器" class="headerlink" title="4.4、链接伪类选择器"></a>4.4、链接伪类选择器</h2><ul><li><strong>伪类选择器</strong>用于向某些选择器添加特殊的效果，比如给链接添加特殊效果，或选择第1个，第n个元素</li><li>伪类选择器书写最大的特点是**用冒号(如 <code>:hover</code>、<code>:first-child</code>)</li><li>伪类选择器很多，比如有链接伪类、结构伪类、链接伪类选择器</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* a是标签选择器 */</span></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* :hover 是链接伪类选择器，鼠标经过 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="comment">/*鼠标经过的时候，由原来的灰色  变成了红色*/</span></span><br><span class="line">   <span class="attribute">color</span>:red; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span><br><span class="line"><span class="comment">/*选择所有未被访问的链接*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="comment">/*选择所有已被访问的链接*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="comment">/*选择鼠标指针位于其上的链接*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="comment">/*选话动链接（鼠标按下未弹起的链接）*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>为了确保生效，请按照LVHA的循顺序声明：link-:visited-:hover-:active。</li><li>因为链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式。</li><li>实际中经常使用的只有<code>:hover</code></li></ol><h2 id="4-5、focus伪类选择器"><a href="#4-5、focus伪类选择器" class="headerlink" title="4.5、focus伪类选择器"></a>4.5、focus伪类选择器</h2><ul><li><code>:focus</code>伪类选择器用于<strong>选取获得焦点的表单元素</strong></li><li>焦点就是光标，一般情况<code>&lt;input&gt;</code>类表单元素才能获取，因此这个选择器也主要针对表单元素来说</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">input</span> : focus &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、CSS元素显示模式"><a href="#五、CSS元素显示模式" class="headerlink" title="五、CSS元素显示模式"></a>五、CSS元素显示模式</h1><p><strong>分为块元素和行内元素</strong></p><h2 id="5-1、块元素"><a href="#5-1、块元素" class="headerlink" title="5.1、块元素"></a>5.1、块元素</h2><ol><li>常见的块元素有<code>&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;</code>等，其中<code>&lt;div&gt;</code> 标签是最典型的块元素。</li><li><p>块级元素的特点：</p><ul><li>自己独占一行</li><li>高度，宽度，外边距以及内边距都可以控制</li><li>宽度默认是容器（父级宽度）的100%</li><li>是一个容器及盒子，里面可以放行内或块级元素</li></ul></li><li><strong>注意：</strong><ul><li>文字类的元素内不能使用块级元素</li><li><code>&lt;p&gt;</code> 标签主要用于存放文字，因此<code>&lt;p&gt;</code>里面不能放块级元素，特别是不能放<code>&lt;div&gt;</code></li><li>2同理，<code>&lt;h1&gt;~&lt;h6&gt;</code>等都是文字类块级标签，里面也不能存放其他块级元素。</li></ul></li></ol><h2 id="5-2、行内元素"><a href="#5-2、行内元素" class="headerlink" title="5.2、行内元素"></a>5.2、行内元素</h2><ol><li>常见的行内元素有<code>&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;</code>等</li><li>其中<code>&lt;span&gt;</code>标签是<strong>最典型的行内元素</strong>。有的地方也将行内元素称为<strong>内联元素</strong>。</li><li><strong>行内元素的特点：</strong><ul><li>相邻行内元素在一行上，一行可以显示多个</li><li>高，宽直接设置是无效的</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或其他行内元素</li></ul></li></ol><p><strong>注意</strong>：</p><ul><li>链接里面不能再放链接</li><li>特殊情况链接<code>&lt;a&gt;</code>里面可以放块级元素，但是给<code>&lt;a&gt;</code>转换一下块级模式最安全</li></ul><h2 id="5-3、行内块元素"><a href="#5-3、行内块元素" class="headerlink" title="5.3、行内块元素"></a>5.3、行内块元素</h2><ol><li>在行内元素中有几个特殊的标签 —— <code>&lt;img/&gt;、&lt;input/&gt;、&lt;td&gt;</code>，它们<strong>同时具有块元素和行内元素的特点</strong></li><li>有些资料称它们为<strong>行内块</strong>元素</li><li>特点：<ul><li>和相邻行内元素在一行上，但是他们之间会有空白缝隙。一行可以显示多个(行内元素特点)</li><li>默认宽度就是它本身内容的宽度(行内元素特点)</li><li>高度，行高，外边距以及内边距都可以控制(块级元素特点)</li></ul></li></ol><h2 id="5-5、元素显示模式转换"><a href="#5-5、元素显示模式转换" class="headerlink" title="5.5、元素显示模式转换"></a>5.5、元素显示模式转换</h2><ul><li>转换为块元素： <code>display:block</code></li><li>转换为行内元素： <code>display:inline</code></li><li>转换为行内块元素: <code>display:inline-block</code></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>:gray;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="六、CSS背景"><a href="#六、CSS背景" class="headerlink" title="六、CSS背景"></a>六、CSS背景</h1><p>背景属性可以设置<strong>背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定</strong>等。</p><h2 id="6-1、background-color"><a href="#6-1、background-color" class="headerlink" title="6.1、background-color"></a>6.1、background-color</h2><ul><li>该属性定义了元素的背景颜色</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-color</span>: transparent;</span><br></pre></td></tr></table></figure><h2 id="6-2、background-image"><a href="#6-2、background-image" class="headerlink" title="6.2、background-image"></a>6.2、background-image</h2><ul><li>该属性描述了元素的背景图像。</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-image</span> : none / <span class="built_in">url</span>(<span class="string">实际url</span>)</span><br><span class="line"><span class="comment">/* background-image : url(image/logo.png) */</span></span><br></pre></td></tr></table></figure><ul><li>url + (实际路径)是固定写法</li><li>如果出现图片无法显示现象，可能是div小于图片大小</li></ul><h2 id="6-3、background-repeat"><a href="#6-3、background-repeat" class="headerlink" title="6.3、background-repeat"></a>6.3、background-repeat</h2><ul><li>该属性定义背景图像的平铺</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-repeat</span>: repeat / no-repeat / repeat-x / repeat-y</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td>repeat</td><td>背景图像在纵向和横向上平铺(默认的)</td></tr><tr><td>no-repeat</td><td>背景图像不平铺</td></tr><tr><td>repeat-x</td><td>背景图像横向平铺</td></tr><tr><td>repeat-y</td><td>背景图像纵向平铺</td></tr></tbody></table></div><ul><li>页面元素既可以添加背景颤色也可以添加背景图片，只不过背景图片会压住背景颜色</li></ul><h2 id="6-4、background-position"><a href="#6-4、background-position" class="headerlink" title="6.4、background-position"></a>6.4、background-position</h2><ul><li>该属性可以改变图片在背景中的位置</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-position</span>: x y;</span><br></pre></td></tr></table></figure><ul><li>参数：X坐标 Y坐标</li><li>可以使用 方位名词 或者 精确单位</li></ul><div class="table-container"><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>百分数    由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top    center   bottom    left    center    right    <strong>方位名词</strong></td></tr></tbody></table></div><ol><li><p>参数是方位名词</p><ul><li><p>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如<code>left top</code>和<code>top left</code></p></li><li><p>如果只指定了一个方位名词，另一个值省略，则第二个值默认<strong>居中对齐</strong></p></li></ul></li><li><p>参数是精准单位</p><ul><li>如果只指定一个数值，那该数值一定是x坐标，另一个默认垂直居中</li></ul></li><li><p>参数是混合单位</p><ul><li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是x坐标，第二个值是y坐标</li></ul></li></ol><h2 id="6-5、background-attachment"><a href="#6-5、background-attachment" class="headerlink" title="6.5、background-attachment"></a>6.5、background-attachment</h2><ul><li>该属性设置背景图像是否固定或者随着页面的其余部分滚动</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background-attachment</span> : scroll / fixed</span><br><span class="line"><span class="comment">/*背景图像是随对象内容滚动/背景图像固定*/</span></span><br></pre></td></tr></table></figure><h2 id="6-6、背景复合写法"><a href="#6-6、背景复合写法" class="headerlink" title="6.6、背景复合写法"></a>6.6、背景复合写法</h2><ul><li><code>background</code> ： 背景颜色 背景图片地址 背景平铺 背景图像滚动 背景图片位置</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span> : transparent <span class="built_in">url</span>(<span class="string">image.jpg</span>) repeat-y fixed top;</span><br></pre></td></tr></table></figure><ul><li>没有固定写法，但在开发中，我们常用以上写法。</li></ul><h2 id="6-7、背景色半透明"><a href="#6-7、背景色半透明" class="headerlink" title="6.7、背景色半透明"></a>6.7、背景色半透明</h2><p>css3的半透明效果</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span> : <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br></pre></td></tr></table></figure><ol><li>最后一个参数是alpha 透明度 ，取值范围在0~1之间</li><li>我们习惯把0.3的 0省略掉，写为<code>background(0,0,0,.3)</code></li><li>背景半透明是指盒子背景半透明</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试</title>
      <link href="/posts/2021-07-25-%E6%B5%8B%E8%AF%95.html"/>
      <url>/posts/2021-07-25-%E6%B5%8B%E8%AF%95.html</url>
      
        <content type="html"><![CDATA[<h1 id="标题测试"><a href="#标题测试" class="headerlink" title="标题测试"></a>标题测试</h1><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6><p>正常文字</p><p>我们不得不面对一个非常尴尬的事实，那就是，生活的意义，发生了会如何，不发生又会如何。 所谓生活的意义，关键是生活的意义需要如何写。 在这种困难的抉择下，本人思来想去，寝食难安。培根曾经提到过，合理安排时间，就等于节约时间。这句话语虽然很短，但令我浮想联翩。每个人都不得不面对这些问题。在面对这种问题时，一般来讲，我们都必须务必慎重的考虑考虑。 总结的来说，生活的意义似乎是一种巧合，但如果我们从一个更大的角度看待问题，这似乎是一种不可避免的事实。 富兰克林说过一句著名的话，你热爱生命吗？那么别浪费时间，因为时间是组成生命的材料。我希望诸位也能好好地体会这句话。 我们一般认为，抓住了问题的关键，其他一切则会迎刃而解。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>这是一个代码<code>code</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1111&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> a == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1111&quot;</span>)</span><br><span class="line">    <span class="comment"># 1212121212</span></span><br></pre></td></tr></table></figure><h1 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h1><p>这里是<a href="www.baidu.com">点击这里超链接</a></p><p>这里是注释<!--121212121212--></p><p>==点击这里高亮==</p><p>这里是<del>测试删除线</del></p><p>这里是<u>下划线</u></p><p>这里是<strong>粗体</strong></p><p>这里是<em>斜体</em></p><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><div class="table-container"><table><thead><tr><th>1</th><th>2</th><th>3</th></tr></thead><tbody><tr><td>111</td><td>222</td><td>333</td></tr><tr><td>111</td><td>222</td><td>333</td></tr><tr><td>111</td><td>222</td><td>333</td></tr></tbody></table></div><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>公式块</p><script type="math/tex; mode=display">f = a +b +c</script><blockquote><p>这里是引用</p></blockquote><ol><li>这里是1</li><li>这里是2</li><li>这里是3</li></ol><ul><li>这里是1</li><li>这里是1</li><li>这里是1</li></ul><h1 id="语言测试"><a href="#语言测试" class="headerlink" title="语言测试"></a>语言测试</h1><p>对语言进行一些测试，如果没问题，那么就没有问题。</p><p>言語をテストして、問題がなければ問題はありません。</p><p>Do some tests on the language, if it’s ok, then there’s no problem.</p><p>언어에 대한 몇 가지 테스트를 수행하고 괜찮으면 문제가 없습니다.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 测试文件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站收集</title>
      <link href="/posts/2021-07-21-%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86.html"/>
      <url>/posts/2021-07-21-%E7%BD%91%E7%AB%99%E6%94%B6%E9%9B%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h1><p><a href="https://www.ghxi.com/">果核剥壳</a></p><p><a href="https://www.iplaysoft.com/">异次元下载站</a></p><p><a href="http://www.dayanzai.me/">大眼仔</a></p><p><a href="https://www.52pojie.cn/">吾爱破解</a></p><h1 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h1><p><a href="https://cupfox.app/">茶杯狐</a></p><p><a href="https://www.yhdmp.live/">樱花动漫</a></p><p><a href="https://gaze.run/">注视影视</a></p><p><a href="https://ddrk.me/">低端影视</a></p><p><a href="https://www.libvio.me/">Livbio</a></p><p><a href="https://cineb.net/">Cineb</a>小奈飞</p><h1 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h1><h2 id="C-or-C"><a href="#C-or-C" class="headerlink" title="C or C++"></a>C or C++</h2><p><a href="https://www.learncpp.com/">Learncpp</a></p><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p><a href="https://mrjokersince1997.github.io/My-Notes/#/">Java学习</a></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p><a href="http://www.pythondoc.com/pythontutorial3/index.html">Python中文学习大本营</a></p><p><a href="https://docs.python.org/zh-cn/3.9/tutorial/index.html">Python教程</a></p><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p><a href="https://www.w3school.com.cn/">w3school</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Learn">MDN</a></p><p><a href="https://v2.cn.vuejs.org/v2/guide/">Vue2.js</a></p><p><a href="https://es6.ruanyifeng.com/">ES6入门教程</a></p><p><a href="https://uniapp.dcloud.net.cn/">uni-app</a></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p><a href="https://c.runoob.com/">菜鸟工具</a></p><p><a href="https://www.runoob.com/">菜鸟教程</a></p><p><a href="https://ol.woobx.cn/">一个木函</a></p><p><a href="https://www.linshi-email.com/">临时邮箱1</a></p><p><a href="https://lsyx.xyz/">临时邮箱2</a></p><p><a href="https://www.jiumodiary.com/">鸠摩搜书</a></p><p><a href="https://edityouraudio.com/zh-Hans/">edit-your-audio</a></p><h1 id="学术期刊"><a href="#学术期刊" class="headerlink" title="学术期刊"></a>学术期刊</h1><p><a href="https://www.oalib.com/">Oalib</a></p><p><a href="http://www.gxlib.org.cn/">广西壮族自治区图书馆</a></p><p><a href="http://www.ucdrs.superlib.net/">全国图书馆参考咨询联盟</a></p>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> others </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
